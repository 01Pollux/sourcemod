/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {105,110}, {97,114}, {100,32}, {116,105}, {37,115}, {101,114}, {101,110}, {97,108}, {110,111}, {135,130}, {34,136}, {142,34},
  {114,101}, {117,110}, {111,114}, {97,110}, {121,32}, {115,116}, {100,101}, {115,105}, {97,116}, {140,129}, {32,143}, {109,98}, {109,138}, {41,10}, {101,134}, {116,104},
  {141,32}, {98,108}, {117,115}, {145,99}, {102,163}, {114,97}, {111,108}, {146,32}, {115,121}, {118,139}, {97,32}, {168,155}, {171,166}, {103,32}, {101,120}, {137,32},
  {103,117}, {176,156}, {133,165}, {133,177}, {105,131}, {102,132}, {105,134}, {115,151}, {97,161}, {99,104}, {164,160}, {169,182}, {101,100}, {111,102}, {162,129}, {115,10},
  {132,187}, {109,190}, {104,97}, {101,131}, {172,154}, {109,97}, {99,130}, {118,133}, {189,32}, {105,184}, {199,201}, {116,97}, {109,101}, {116,111}, {98,128}, {112,144},
  {99,147}, {178,148}, {44,32}, {150,181}, {133,97}, {179,129}, {208,153}, {130,32}, {99,116}, {118,128}, {101,10}, {149,152}, {102,105}, {117,108}, {97,115}, {154,10},
  {109,152}, {196,157}, {110,32}, {40,225}, {100,105}, {99,111}, {202,128}, {198,149}, {34,32}, {139,32}, {119,105}, {99,108}, {151,122}, {108,128}, {136,10}, {147,32},
  {132,173}, {194,217}, {98,101}, {111,112}, {116,121}, {37,131}, {164,141}, {102,146}, {132,32}, {140,32}, {203,173}, {224,185}, {193,206}, {58,223}, {100,111}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style declarations\n",
/*121*/  "this syntax is not yet supported\n",
/*122*/  "expected type expression\n",
#else
  "\256pe\330\236\315k\212:\232\322bu\201fo\221\206\217\012",
  "\202l\224\252s\204g\355\333e\234\201(\247\256\317\267\202) \320 f\246low ea\271 \042c\336e\042\012",
  "\226\353\324\240\310\252loc\351\346\301appe\205 \370\252\345mpo\221\206\241ock\012",
  "\366\232 \264\231imple\234t\274\012",
  "\272\305\224\231\361\263t\277",
  "\374a\267gn\236\315 \357\262y\012",
  "\363\211\230\247\326\316\220\323\274\012",
  "\374\252\347\223\201\256\317\267\202; \336sum\236z\211o\012",
  "\300\321\354\200(nega\207ve\322z\211o \247ou\201\310bo\221ds\235",
  "\300\272\247\226\353\324\215\012",
  "\300out\227d\200\366\277",
  "\300\272c\213l\322\231\252\273add\220s\277",
  "\371\212tr\224po\204\201(\371pu\241ic \366s\235",
  "\300\333e\234t; \231\370s\352t\271\012",
  "\042\226fa\335t\350c\336\200\374\237\200l\336\201c\336\200\370s\352t\271 \333e\234t\012",
  "m\335\207p\355\226fa\335t\203\370\042s\352t\271\042\012",
  "\221\323\236\304\012",
  "\204i\207\213iza\240d\230\252\256ce\274\203\226\353\205\236\354\332",
  "\231\252la\362l\375",
  "\300\254 nam\200\217\012",
  "\254 \213\220ad\224\323\274\375",
  "\374l\251u\200(n\202-\347\223t\235",
  "\321a\267gn\234\201\374\227mp\355a\267gn\234t\012",
  "\042b\220ak\350\247\042\306t\204ue\350\264ou\201\310\306t\256t\012",
  "\272head\360\344ff\211\203from pro\315\364p\332",
  "\371\373\360\042#if...\042\012",
  "\300\271\324\330\257\347\223t\012",
  "\300subscrip\201(\231\357\321\247\315o m\223\224subscripts)\375",
  "\300\256\317\267\202\322\336sum\236z\211o\012",
  "\345mpo\221\206\333e\234\201\231\353os\236a\201\237\200\212\206\310\334\355(\225\205t\236a\201l\204\200%d\235",
  "\221k\214w\342\344\220c\207v\332",
  "\321\204\226x ou\201\310bo\221d\203(\346\217\235",
  "\321\374\204\226x\236(\346\217\235",
  "\325\376\303\231\361\252\226fa\335\201\251u\200(\325%d\235",
  "\325\364p\200mis\373 (\325%d\235",
  "empt\224\333e\234t\012",
  "\300\225r\360(po\267\241\224n\202-t\211m\204\230\236\225r\204g\235",
  "\256t\245 \271\324\330\211\203\327l\204\332",
  "\347\223\201\254 \302\203\371\354\332",
  "duplic\230\200\042c\336e\350la\362l (\251u\200%d\235",
  "\300ellip\227s\322\321\354\200\264\231k\214wn\012",
  "\300\345\233\204a\240\310\353\336\203speci\334\211\277",
  "\271\324\330\257\347\223\201\256ce\274\203r\223g\200f\247pack\236\225r\204g\012",
  "po\227\215\351p\324\314t\211\203\301\317c\274\200\213l nam\236p\324\314t\211\277",
  "\315o m\223\224\272\263t\277",
  "\221k\214w\342\321\354\200(\346\217\235",
  "\321\354\303\376 \231\373\322\247\226\225\204a\240\321\264\315o sm\213l\012",
  "\321(\203\376 \231\373\012",
  "\300l\204\200\306t\204ua\215\012",
  "\300r\223g\332",
  "\300subscript\322\242\200\042[ ]\350\363\211\230\222\203\327\305j\247\344\234\227\202\277",
  "m\335\207-\344\234\227\202\351\262y\203\374f\335l\224\204i\207\213iz\274\012",
  "\256ce\274\360\305ximum nu\233\257\310\344\234\227\202\277",
  "\221\373\236\353os\360b\245c\200(\042}\042\235",
  "\225\205\201\310\272bod\224\352\237ou\201\272head\211\012",
  "\262ys\322loc\351\312\303\223\206\272\263t\203\326\316pu\241ic (\346\217\235",
  "\221\265ish\236\256\317\267\327\362\367\200\345mpil\257\344\220c\207v\332",
  "duplic\230\200\263t; sam\200\325\264p\336s\236t\352c\332",
  "\272\325\305\224\231\361\252\226fa\335\201\251u\200(\346\217\235",
  "m\335\207p\355\042#else\350\344\220c\207v\303\362twe\212 \042#if ... #\212\344f\042\012",
  "\042#elseif\350\344\220c\207\331f\246low\203\357\042#else\350\344\220c\207v\332",
  "nu\233\257\310\363\211\223d\203\376\303\231\334\201\237\200\363\211\230\222\012",
  "\272\220s\335\201\372\310\363\211\230\222\232 \374\217\012",
  "\326\271\223g\200\317\323\236\363\211\230\222\277",
  "\272\325\305\224\202l\224\361\252s\204g\355\372(\325%d\235",
  "\272\325\305\224\231\316\252\220f\211\212c\200\325\247\357\321(\325\217\235",
  "\346\326\316bo\237 \252\220f\211\212c\200\223\206\357\321(\346\217\235",
  "\300\245\215\351nu\233\257\317ci\227\327\370#p\245g\305\012",
  "\245\215\351nu\233\257\367\305\201\213\220ad\224\323\274\012",
  "\245\215\351nu\233\257supp\222\201wa\203\231\212\270\274\012",
  "\242\211-\323\236\363\211\230\247\374\226\353\205\236\362\367\200\242\200(\366\232\235",
  "\042\354e\275\350\363\211\230\247\264\300\327\042\366\350\254\277",
  "\272\325\374\357\321(\325\217\235",
  "#\323\200p\230t\211\342\301\225\205\201\352\237 \357\213p\302\362\207c \271\324\330\211\012",
  "\204pu\201l\204\200\315o l\202\255(aft\257subs\207tu\215s\235",
  "\250n\313x \211r\247\370\237\200\256\317\267\202\322\247\300\272c\213l\012",
  "m\213\367m\236UTF-8 \212\345d\204g\322\247c\222rupt\236\334le: \356",
  "\272\242\303bo\237 \042\220turn\350\223\206\042\220tur\342<\251ue>\042\012",
  "\204\306\227\225\212\201\220tur\342\364p\303(\321& n\202-\262y\235",
  "\221k\214w\342\254\322\247\231\252\347\223\201\254 \343",
  "\326\313k\200\252\372a\203\252\226fa\335\201\251u\200f\247\357\204\226x\236\321p\324\314t\257\343",
  "\242\211-\323\236\363\211\230\222\203\223\206na\207\331\366\203\305\224\231\361\333e\277",
  "\252\272\247\346\305\224\202l\224\362l\202\255\315 \252s\204g\355au\315\340\327\343",
  "\333\200\306fli\330: \202\200\310\237\200\333\303\264\213\220ad\224a\267gn\236\315 a\214\237\257imple\234\313\240\343",
  "\371\333\303\205\200\323\236f\247\304\012",
  "\221k\214w\342au\315\340\202\337",
  "\221k\214w\342\333\200\217 f\247au\315\340\202\337",
  "pu\241ic \312\303\223\206loc\351\312\303\305\224\231\361\333\303\343",
  "\333\200\312\303\305\224\231\316\204i\207\213iz\236\343",
  "pu\241ic \366\203\305\224\231\220tur\342\262y\203\343",
  "a\233i\260ou\203\347\223t; \372ov\211rid\200\264\220qui\220\206\343",
  "nu\233\257\310\263t\203\376\303\231\373 \323i\215\012",
  "\256pe\330\236\372nam\200id\212\207\334\211\012",
  "\272\212um\211a\240\220qui\220\203\221iqu\200\313g\012",
  "\326\361\220qui\220\206p\324\314t\211\203aft\257\363\215\351p\324\314t\211\277",
  "\345\335\206\231\265\206\314\233\211\232 \370\225ruc\201\217\012",
  "\304 \376\303\231\361\252\373\360\364p\332",
  "\364p\200\217 sho\335\206\316\217 \370new-\225y\355\226\353\324\215\277",
  "\365sho\335\206\231\361\357\256plici\201\220tur\342\364p\332",
  "\272pro\315\364p\303\376 \231\373\012",
  "specif\224ei\237\257\213l \344\234\227\202\203\247\202l\224\237\200l\336\201\344\234\227\202\012",
  "\326\265\206\365\356",
  "\365wa\203\213\220ad\224\323\236\327\237\264\356",
  "\326\265\206\223\224\314\237od\203f\247\356",
  "\326\265\206\314\237o\206\210.\356",
  "\326c\213l \314\237od\203\327\357\262y\012",
  "\326c\213l \314\237od\203\327\252\366\012",
  "\314\237o\206\301\361\252\334rs\201\325\345mpa\207\241\200\352\237 \237\200\365\364p\200(\210\235",
  "\365nam\200\301\225\205\201\352\237 \357upp\211c\336\200lett\211\012",
  "\365\302\203\213\220ad\224\362\212 \323\236(\317vio\242l\224se\212 a\203\210\235",
  "\256pe\330\236id\212\207\334\257- d\266you \367ge\201\252\364pe?\012",
  "\347ru\330\247\272\301\220tur\342\372\356",
  "\326\323\200\347ru\330\247\367\232; \213\220ad\224\256i\225\203a\203\252\356",
  "miss\360\364pe\322\247\365\301\361\237\200sam\200nam\200a\203\365\217\012",
  "\326\242\200\226lete\322\365\365\302\203\371\226\225ru\330\222\012",
  "\371\314\237od\305p \247\353\336\203wa\203fo\221\206f\247\356",
  "\371\226\225ru\330\247wa\203fo\221\206f\247\365\356",
  "\226\225ru\330\222\203\374na\207\331\366\277",
  "\226\225ru\330\222\203\326\361\256t\245 \263t\277",
  "\314\237od\305p \223\206\353\336\203\227gn\230u\220\203\301\242\200new-\225y\355\226\353\324\215\277",
  "\237\264\250n\313x \264\231ye\201supp\222t\274\012"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\326\220a\206from \334le\375",
  "\326writ\200\315 \334le\375",
  "t\270\200ov\211flow\375",
  "\204suf\334ci\212\201\314m\222y\012",
  "\300\336se\233l\257\204\225ruc\215\337",
  "num\211ic ov\211flow\322\256ce\274\360capaci\364\012",
  "\345mpil\236scrip\201\256ce\274\203\237\200\305ximum \314m\222\224\354\200(%l\206bytes\235",
  "\315o m\223\224\211r\247\314ssag\303\327\202\200l\204\332",
  "\345\226pag\200\305pp\360\334\355\231fo\221d\012",
  "\300p\230h\375",
  "\336s\211\240fail\274: \356",
  "\242\257\211r\222: \356"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\304 \264tr\243\230\236\315 %\206\271\324\330\211\277",
  "\220\323i\240\310\347\223t/\305cro \343",
  "nu\233\257\310\263t\203\376\303\231\373 \323i\215\012",
  "\254 \264nev\257\242\274\375",
  "\254 \264a\267gn\236\252\251u\200\237a\201\264nev\257\242\274\375",
  "\220d\221d\223\201\345\226: \347\223\201\256\317\267\327\264z\211o\012",
  "\220d\221d\223\201te\225: \347\223\201\256\317\267\327\264n\202-z\211o\012",
  "\221k\214w\342#p\245g\305\012",
  "\272\352\237 \372\220s\335\201\242\236\362\367\200\323i\215\322\367c\360\220p\205s\332",
  "\366\232 sho\335\206\220tur\342\252\251u\332",
  "po\267\241\200\242\200\310\254 \362\367\200\204i\207\213iza\215\375",
  "po\267\241\224\221\204t\212\226\206a\267gn\234t\012",
  "po\267\241\224\221\204t\212\226\206bit\352s\200\363\211a\215\012",
  "\372mis\373\012",
  "po\267\241\224\252\042\347\350\321\325wa\203\204t\212\226d\375",
  "\256\317\267\327\302\203\371effe\330\012",
  "ne\225\236\345m\234t\012",
  "loos\200\204d\212\313\215\012",
  "\246\206\225y\355pro\315\364p\303\242\236\352\237 \363\215\351semic\246umn\277",
  "loc\351\346\217 s\302\376w\203\252\346a\201\252\317c\274\360level\012",
  "\256\317\267\327\352\237 \372ov\211rid\200\301appe\205 \362twe\212 p\205\212\237ese\277",
  "la\362l nam\200\217 s\302\376w\203\372na\314\012",
  "nu\233\257\310\344git\203\256ce\274\203\245\215\351nu\233\257\317ci\227\202\012",
  "\220d\221d\223\201\042\354e\275\042: \325\354\200\264\213way\2031 \343",
  "\204\226t\211m\204\230\200\321\354\200\370\042\354e\275\350\256\317\267\327\343",
  "\221\220a\271\270\200\345\226\012",
  "\252\346\264a\267gn\236\315 itself \343",
  "m\222\200\204i\207\213iz\211\203\237\357\212um \334eld\277",
  "l\212g\237 \310\204i\207\213iz\257\256ce\274\203\354\200\310\237\200\212um \334eld\012",
  "\204\226x \372mis\373 \343",
  "\371imple\234\313\240f\247\333\200\217 \370\366\232\322\371f\213l-back\012",
  "\333\200speci\334ca\240\327\367w\205\206\226\353\324\240\264ig\214\220d\012",
  "outpu\201\334\355\264writt\212\322bu\201\352\237 \345mpac\201\212\345d\360\344s\270\274\012",
  "\333\200\346\217 s\302\376w\203\252glob\351\312\332",
  "\304 \264m\205k\236a\203\226\317c\230\274: \356",
  "pu\241ic \272lack\203\367w\205\206\226\353\324\240\343",
  "\221k\214w\342p\324\314t\257\370subs\207tu\240(\204c\222\220c\201#\323\200p\230t\211n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
