/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {105,110}, {100,32}, {97,114}, {116,105}, {37,115}, {101,114}, {101,110}, {97,108}, {110,111}, {135,130}, {34,136}, {142,34},
  {114,101}, {117,110}, {111,114}, {97,110}, {121,32}, {115,105}, {97,116}, {115,116}, {100,101}, {140,129}, {32,143}, {109,98}, {101,133}, {109,138}, {41,10}, {116,104},
  {141,32}, {145,99}, {98,108}, {117,115}, {102,161}, {114,97}, {111,108}, {146,32}, {115,121}, {118,139}, {97,32}, {168,155}, {171,166}, {101,120}, {103,32}, {137,32},
  {103,117}, {105,131}, {115,149}, {176,157}, {134,165}, {134,179}, {105,133}, {102,132}, {97,162}, {99,104}, {164,160}, {169,182}, {101,100}, {111,102}, {163,129}, {115,10},
  {132,187}, {109,190}, {104,97}, {116,111}, {101,131}, {172,154}, {109,97}, {98,128}, {99,130}, {118,134}, {112,144}, {44,32}, {189,32}, {105,184}, {201,205}, {116,97},
  {109,101}, {99,147}, {180,148}, {152,183}, {134,97}, {117,108}, {99,116}, {181,129}, {209,153}, {130,32}, {102,105}, {118,128}, {154,10}, {101,10}, {151,150}, {97,115},
  {128,143}, {109,150}, {197,158}, {110,32}, {40,226}, {100,105}, {99,111}, {200,151}, {34,32}, {139,32}, {119,105}, {99,108}, {149,122}, {116,121}, {108,128}, {136,10},
  {147,32}, {132,174}, {194,219}, {98,101}, {111,112}, {237,112}, {37,131}, {164,141}, {102,146}, {111,32}, {132,32}, {140,32}, {207,174}, {202,178}, {225,185}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style declarations\n",
/*121*/  "this syntax is not yet supported\n",
/*122*/  "expected type expression\n",
/*123*/  "fully-qualified name \"%s\" is too long, would be truncated to \"%s\"\n",
#else
  "\255pe\326\234\303k\212:\232\313bu\201fo\221\205\217\012",
  "\202l\224\252s\204g\356\336e\235\201(\247\255\375\202) \321 f\246low ea\271 \042c\337e\042\012",
  "\230\353\324\240\314\252loc\351\316\200\301appe\206 \372\252\346mpo\221\205\242ock\012",
  "\367\232 \261\231imple\235t\274\012",
  "\272\306\224\231\362\265t\277",
  "\301\307a\262gn\234\303 \360\264y\012",
  "\364\211\226\247\330\307\220\323\274\012",
  "\301\307\252\347\223\201\255\375\202; \337sum\234z\211o\012",
  "\300\322\354\200(nega\207ve\313z\211\371\247ou\201\314bo\221ds\236",
  "\300\272\247\230\353\324\215\012",
  "\300out\225d\200\367\277",
  "\300\272c\213l\313\231\252\273add\220s\277",
  "\373\212tr\224po\204\201(\373pu\242ic \367s\236",
  "\300\336e\235t; \231\372s\352t\271\012",
  "\042\230fa\325t\350c\337\200\301\307\237\200l\337\201c\337\200\372s\352t\271 \336e\235t\012",
  "m\325\207p\356\230fa\325t\203\372\042s\352t\271\042\012",
  "\221\323\234\305\012",
  "\204i\207\213iza\240d\226\252\255ce\274\203\230\353\206\234\354\335",
  "\231\252la\363l:\334",
  "\300\254 nam\340\012",
  "\254 \213\220ad\224\323\274:\334",
  "\301\307l\251u\200(n\202-\347\223t\236",
  "\322a\262gn\235\201\301\307\225mp\356a\262gn\235t\012",
  "\042b\220ak\350\247\042\310t\204ue\350\261ou\201\314\310t\255t\012",
  "\272head\361\345ff\211\203from pro\303\365\335",
  "\373\376\361\042#if...\042\012",
  "\300\271\324\326\257\347\223t\012",
  "\300subscrip\201(\231\360\322\247\303\371m\223\224subscripts):\334",
  "\300\255\375\202\313\337sum\234z\211o\012",
  "\346mpo\221\205\336e\235\201\231\353os\234a\201\237\200\212\205\314\332\356(\227\206t\234a\201l\204\200%d\236",
  "\221k\214w\343\345\220c\207v\335",
  "\322\204\230x ou\201\314bo\221d\203(\316\340\236",
  "\322\301\307\204\230x\234(\316\340\236",
  "\327do\304\231\362\252\230fa\325\201\251u\200(\327%d\236",
  "\327\365\200mis\376 (\327%d\236",
  "empt\224\336e\235t\012",
  "\300\227r\361(po\262\242\224n\202-t\211m\204\226\234\227r\204g\236",
  "\255t\245 \271\324\326\211\203\331l\204\335",
  "\347\223\201\254 \302\203\373\354\335",
  "duplic\226\200\042c\337e\350la\363l (\251u\200%d\236",
  "\300ellip\225s\313\322\354\200\261\231k\214wn\012",
  "\300\346\233\204a\240\314\353\337\203speci\332\211\277",
  "\271\324\326\257\347\223\201\255ce\274\203r\223g\200f\247pack\234\227r\204g\012",
  "po\225\215\351p\324\320t\211\203\301\312c\274\200\213l nam\234p\324\320t\211\277",
  "\303\371m\223\224\272\265t\277",
  "\221k\214w\343\322\354\200(\316\340\236",
  "\322\354\304d\371\231\376\313\247\230\227\204a\240\322\261\303\371sm\213l\012",
  "\322(\203d\371\231\376\012",
  "\300l\204\200\310t\204ua\215\012",
  "\300r\223g\335",
  "\300subscript\313\243\200\042[ ]\350\364\211\226\222\203\331\306j\247\345\235\225\202\277",
  "m\325\207-\345\235\225\202\351\264y\203\301\307f\325l\224\204i\207\213iz\274\012",
  "\255ce\274\361\306ximum nu\233\257\314\345\235\225\202\277",
  "\221\376\234\353os\361b\245c\200(\042}\042\236",
  "\227\206\201\314\272bod\224\352\237ou\201\272head\211\012",
  "\264ys\313loc\351\316\304\223\205\272\265t\203\330\307pu\242ic (\316\340\236",
  "\221\267ish\234\255\375\331\363\370\200\346mpil\257\345\220c\207v\335",
  "duplic\226\200\265t; sam\200\327\261p\337s\234t\352c\335",
  "\272\327\306\224\231\362\252\230fa\325\201\251u\200(\316\340\236",
  "m\325\207p\356\042#else\350\345\220c\207v\304\363twe\212 \042#if ... #\212\345f\042\012",
  "\042#elseif\350\345\220c\207\333f\246low\203\360\042#else\350\345\220c\207v\335",
  "nu\233\257\314\364\211\223d\203do\304\231\332\201\237\200\364\211\226\222\012",
  "\272\220s\325\201\374\314\364\211\226\222\232 \301\307\217\012",
  "\330\271\223g\200\312\323\234\364\211\226\222\277",
  "\272\327\306\224\202l\224\362\252s\204g\356\374(\327%d\236",
  "\272\327\306\224\231\307\252\220f\211\212c\200\327\247\360\322(\327\217\236",
  "\316\200\330\307bo\237 \252\220f\211\212c\200\223\205\360\322(\316\340\236",
  "\300\245\215\351nu\233\257\312ci\225\331\372#p\245g\306\012",
  "\245\215\351nu\233\257\370\306\201\213\220ad\224\323\274\012",
  "\245\215\351nu\233\257supp\222\201wa\203\231\212\270\274\012",
  "\243\211-\323\234\364\211\226\247\301\307\230\353\206\234\363\370\200\243\200(\367\232\236",
  "\042\354e\275\350\364\211\226\247\261\300\331\042\367\350\254\277",
  "\272\327\301\307\360\322(\327\217\236",
  "#\323\200p\226t\211\343\301\227\206\201\352\237 \360\213p\302\363\207c \271\324\326\211\012",
  "\204pu\201l\204\200\303\371l\202\256(aft\257subs\207tu\215s\236",
  "\250n\317x \211r\247\372\237\200\255\375\202\313\247\300\272c\213l\012",
  "m\213\370m\234UTF-8 \212\346d\204g\313\247c\222rupt\234\332le: \357",
  "\272\243\304bo\237 \042\220turn\350\223\205\042\220tur\343<\251ue>\042\012",
  "\204\310\225\227\212\201\220tur\343\365\304(\322& n\202-\264y\236",
  "\221k\214w\343\254\313\247\231\252\347\223\201\254 \344",
  "\330\317k\200\252\374a\203\252\230fa\325\201\251u\200f\247\360\204\230x\234\322p\324\320t\257\344",
  "\243\211-\323\234\364\211\226\222\203\223\205na\207\333\367\203\306\224\231\362\336e\277",
  "\252\272\247\316\200\306\224\202l\224\363l\202\256\303 \252s\204g\356au\303\341\331\344",
  "\336\200\310fli\326: \202\200\314\237\200\336\304\261\213\220ad\224a\262gn\234\303 a\214\237\257imple\235\317\240\344",
  "\373\336\304\206\200\323\234f\247\305\012",
  "\221k\214w\343au\303\341\202\334",
  "\221k\214w\343\336\340 f\247au\303\341\202\334",
  "pu\242ic \316\304\223\205loc\351\316\304\306\224\231\362\336\304\344",
  "\336\200\316\304\306\224\231\307\204i\207\213iz\234\344",
  "pu\242ic \367\203\306\224\231\220tur\343\264y\203\344",
  "a\233i\260ou\203\347\223t; \374ov\211rid\200\261\220qui\220\205\344",
  "nu\233\257\314\265t\203do\304\231\376 \323i\215\012",
  "\255pe\326\234\374nam\200id\212\207\332\211\012",
  "\272\212um\211a\240\220qui\220\203\221iqu\200\317g\012",
  "\330\362\220qui\220\205p\324\320t\211\203aft\257\364\215\351p\324\320t\211\277",
  "\346\325\205\231\267\205\320\233\211\232 \372\227ruc\201\217\012",
  "\305 do\304\231\362\252\376\361\365\335",
  "\365\340 sho\325\205\307\217 \372new-\227y\356\230\353\324\215\277",
  "\366sho\325\205\231\362\360\255plici\201\220tur\343\365\335",
  "\272pro\303\365\304d\371\231\376\012",
  "specif\224ei\237\257\213l \345\235\225\202\203\247\202l\224\237\200l\337\201\345\235\225\202\012",
  "\330\267\205\366\357",
  "\366wa\203\213\220ad\224\323\234\331\237\261\357",
  "\330\267\205\223\224\320\237od\203f\247\357",
  "\330\267\205\320\237o\205\210.\357",
  "\330c\213l \320\237od\203\331\360\264y\012",
  "\330c\213l \320\237od\203\331\252\367\012",
  "\320\237o\205\301\362\252\332rs\201\327\346mpa\207\242\200\352\237 \237\200\366\365\200(\210\236",
  "\366nam\200\301\227\206\201\352\237 \360upp\211c\337\200lett\211\012",
  "\366\302\203\213\220ad\224\363\212 \323\234(\312vio\243l\224se\212 a\203\210\236",
  "\255pe\326\234id\212\207\332\257- d\266you \370ge\201\252\365e?\012",
  "\347ru\326\247\272\301\220tur\343\374\357",
  "\330\323\200\347ru\326\247\370\232; \213\220ad\224\255i\227\203a\203\252\357",
  "miss\361\365e\313\247\366\301\362\237\200sam\200nam\200a\203\366\217\012",
  "\330\243\200\230lete\313\366\366\302\203\373\230\227ru\326\222\012",
  "\373\320\237od\306p \247\353\337\203wa\203fo\221\205f\247\357",
  "\373\230\227ru\326\247wa\203fo\221\205f\247\366\357",
  "\230\227ru\326\222\203\301\307na\207\333\367\277",
  "\230\227ru\326\222\203\330\362\255t\245 \265t\277",
  "\320\237od\306p \223\205\353\337\203\225gn\226u\220\203\301\243\200new-\227y\356\230\353\324\215\277",
  "\237\261\250n\317x \261\231ye\201supp\222t\274\012",
  "\255pe\326\234\365\200\255\375\202\012",
  "f\325ly-qu\213i\332\234nam\340 \261\303\371l\202g\313wo\325\205\307tr\241\226\234\303\334"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\330\220a\205from \332le:\334",
  "\330writ\200\303 \332le:\334",
  "t\270\200ov\211flow:\334",
  "\204suf\332ci\212\201\320m\222y\012",
  "\300\337se\233l\257\204\227ruc\215\334",
  "num\211ic ov\211flow\313\255ce\274\361capaci\355\012",
  "\346mpil\234scrip\201\255ce\274\203\237\200\306ximum \320m\222\224\354\200(%l\205bytes\236",
  "\303\371m\223\224\211r\247\320ssag\304\331\202\200l\204\335",
  "\346\230pag\200\306pp\361\332\356\231fo\221d\012",
  "\300p\226h:\334",
  "\337s\211\240fail\274: \357",
  "\243\257\211r\222: \357"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\305 \261tr\241\226\234\303 %\205\271\324\326\211\277",
  "\220\323i\240\314\347\223t/\306cr\371\344",
  "nu\233\257\314\265t\203do\304\231\376 \323i\215\012",
  "\254 \261nev\257\243\274:\334",
  "\254 \261a\262gn\234\252\251u\200\237a\201\261nev\257\243\274:\334",
  "\220d\221d\223\201\346\230: \347\223\201\255\375\331\261z\211o\012",
  "\220d\221d\223\201te\227: \347\223\201\255\375\331\261n\202-z\211o\012",
  "\221k\214w\343#p\245g\306\012",
  "\272\352\237 \374\220s\325\201\243\234\363\370\200\323i\215\313\370c\361\220p\206s\335",
  "\367\232 sho\325\205\220tur\343\252\251u\335",
  "po\262\242\200\243\200\314\254 \363\370\200\204i\207\213iza\215:\334",
  "po\262\242\224\221\204t\212\230\205a\262gn\235t\012",
  "po\262\242\224\221\204t\212\230\205bit\352s\200\364\211a\215\012",
  "\374mis\376\012",
  "po\262\242\224\252\042\347\350\322\327wa\203\204t\212\230d:\334",
  "\255\375\331\302\203\373effe\326\012",
  "ne\227\234\346m\235t\012",
  "loos\200\204d\212\317\215\012",
  "\246\205\227y\356pro\303\365\304\243\234\352\237 \364\215\351semic\246umn\277",
  "loc\351\316\340 s\302dow\203\252\316\200a\201\252\312c\274\361level\012",
  "\255\375\331\352\237 \374ov\211rid\200\301appe\206 \363twe\212 p\206\212\237ese\277",
  "la\363l nam\340 s\302dow\203\374na\320\012",
  "nu\233\257\314\345git\203\255ce\274\203\245\215\351nu\233\257\312ci\225\202\012",
  "\220d\221d\223\201\042\354e\275\042: \327\354\200\261\213way\2031 \344",
  "\204\230t\211m\204\226\200\322\354\200\372\042\354e\275\350\255\375\331\344",
  "\221\220a\271\270\200\346\230\012",
  "\252\316\200\261a\262gn\234\303 itself \344",
  "m\222\200\204i\207\213iz\211\203\237\360\212um \332eld\277",
  "l\212g\237 \314\204i\207\213iz\257\255ce\274\203\354\200\314\237\200\212um \332eld\012",
  "\204\230x \374mis\376 \344",
  "\373imple\235\317\240f\247\336\340 \372\367\232\313\373f\213l-back\012",
  "\336\200speci\332ca\240\331\370w\206\205\230\353\324\240\261ig\214\220d\012",
  "outpu\201\332\356\261writt\212\313bu\201\352\237 \346mpac\201\212\346d\361\345s\270\274\012",
  "\336\200\316\340 s\302dow\203\252glob\351\316\335",
  "\305 \261m\206k\234a\203\230\312c\226\274: \357",
  "pu\242ic \272lack\203\370w\206\205\230\353\324\240\344",
  "\221k\214w\343p\324\320t\257\372subs\207tu\240(\204c\222\220c\201#\323\200p\226t\211n\236"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
