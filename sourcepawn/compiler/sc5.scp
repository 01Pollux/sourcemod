/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {100,32}, {105,110}, {97,114}, {116,105}, {37,115}, {101,114}, {110,111}, {97,110}, {101,110}, {97,108}, {135,130}, {114,101},
  {34,136}, {144,34}, {111,114}, {117,110}, {121,32}, {138,129}, {115,105}, {97,116}, {115,116}, {101,132}, {100,101}, {109,140}, {32,145}, {41,10}, {109,98}, {116,104},
  {114,97}, {117,115}, {146,32}, {147,99}, {142,32}, {98,108}, {102,163}, {111,108}, {101,120}, {118,141}, {97,32}, {115,121}, {99,139}, {171,158}, {134,160}, {173,167},
  {112,101}, {116,121}, {172,149}, {115,10}, {103,32}, {103,117}, {181,155}, {137,32}, {134,182}, {116,111}, {102,133}, {115,150}, {99,104}, {105,132}, {97,165}, {111,102},
  {105,131}, {161,129}, {166,164}, {169,189}, {109,193}, {104,97}, {109,101}, {99,116}, {174,148}, {133,195}, {109,97}, {101,100}, {101,131}, {99,130}, {37,131}, {175,156},
  {44,32}, {191,32}, {117,108}, {99,111}, {98,128}, {118,134}, {112,143}, {130,32}, {105,190}, {213,216}, {116,97}, {110,32}, {154,186}, {134,97}, {102,105}, {118,128},
  {184,129}, {100,105}, {111,112}, {97,115}, {136,10}, {156,10}, {128,145}, {152,151}, {109,151}, {119,105}, {97,131}, {226,137}, {101,10}, {207,157}, {34,32}, {99,108},
  {40,237}, {150,122}, {108,128}, {205,152}, {139,32}, {141,32}, {177,176}, {197,223}, {110,97}, {101,108}, {177,112}, {166,142}, {133,32}, {159,32}, {133,180}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method or property %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style type declarations\n",
/*121*/  "cannot specify array dimensions on both type and name\n",
/*122*/  "expected type expression\n",
/*123*/  "fully-qualified name \"%s\" is too long, would be truncated to \"%s\"\n",
/*124*/  "unexpected token, expected method or property\n",
/*125*/  "expected \"native\" or \"get\"\n",
/*126*/  "%s for %s already exists\n",
/*127*/  "property getters cannot accept extra arguments\n",
/*128*/  "%s must have the same return type as property %s (%s)\n",
/*129*/  "cannot mix methodmaps and classes with inheritance\n",
/*130*/  "cannot coerce functions to values\n",
/*131*/  "cannot coerce object type %s to non-object type %s\n",
/*132*/  "cannot coerce non-object type %s to object type %s\n",
/*133*/  "cannot coerce unrelated object types %s and %s\n",
/*134*/  "type mismatch (%s and %s)\n",
/*135*/  "cannot use an object in a multi-tag selector\n",
/*136*/  "arrays are not supported as return types\n",
/*137*/  "cannot mix reference and array types\n",
/*138*/  "const was specified twice\n",
/*139*/  "could not find type \"%s\"\n",
/*140*/  "new-style array types cannot specify dimension sizes as part of their type\n",
/*141*/  "natives cannot return arrays\n",
#else
  "\250\260\307\231\271k\214:\234\320bu\201fo\223\204\221\012",
  "\202l\224\252s\205g\362\347e\233\201(\242\250\326\273\202) \254 f\247low ea\274 \042c\343e\042\012",
  "\232\357\335\244\321\252loc\365\331\200\304ap\260\206 \374\252\323mpo\223\204\245ock\012",
  "\373\234 \300\225imple\233t\313\012",
  "\302\312\224\225\367\270t\263",
  "\304\324a\273gn\231\271 \364\256y\012",
  "\353\227\242\262\324\217\334\313\012",
  "\304\324\252\363\213\201\250\326\273\202; \343sum\231z\211o\012",
  "\311\310\361\200(nega\207ve\320z\211o \242ou\201\321bo\223ds\235",
  "\311\302\242\232\357\335\216\012",
  "\311out\226d\200\373\263",
  "\311\302c\215l\320\225\252\303add\217s\263",
  "\212 \214tr\224po\205\201(\212 pu\245ic \373s\235",
  "\311\347e\233t; \225\374s\351t\274\012",
  "\042\232fa\322t\356c\343\200\304\324\237\200l\343\201c\343\200\374s\351t\274 \347e\233t\012",
  "m\322\207p\362\232fa\322t\203\374\042s\351t\274\042\012",
  "\223\334\231\317\012",
  "\205i\207\215iza\244d\227\252\250ce\313\203\232\357\206\231\361\354",
  "\225\252lab\371:\345",
  "\311\257 \370m\346\012",
  "\257 \215\217ad\224\334\313:\345",
  "\304\324l\251u\200(n\202-\363\213t\235",
  "\310a\273gn\233\201\304\324\226mp\362a\273gn\233t\012",
  "\042b\217ak\356\242\042\315t\205ue\356\300ou\201\321\315t\250t\012",
  "\302head\376\341ff\211\203from pro\271\366\012",
  "\212 \350\274\376\042#if...\042\012",
  "\311\274\335\307\267\363\213t\012",
  "\311subscrip\201(\225\364\310\242\271o m\213\224subscripts):\345",
  "\311\250\326\273\202\320\343sum\231z\211o\012",
  "\323mpo\223\204\347e\233\201\225\357os\231a\201\237\200\214\204\321\336\362(\230\206t\231a\201l\205\200%d\235",
  "\223k\212w\333\341\217c\207v\354",
  "\310\205\232x ou\201\321bo\223d\203(\331\346\235",
  "\310\304\324\205\232x\231(\331\346\235",
  "\340do\314\225\367\252\232fa\322\201\251u\200(\340%d\235",
  "\340\372\200mis\350\274 (\340%d\235",
  "empt\224\347e\233t\012",
  "\311\230r\376(po\273\245\224n\202-t\211m\205\227\231\230r\205g\235",
  "\250t\240 \274\335\307\211\203\327l\205\354",
  "\363\213\201\257 \305\203\212 \361\354",
  "duplic\227\200\042c\343e\356lab\371 (\251u\200%d\235",
  "\311\371lip\226s\320\310\361\200\300\225k\212wn\012",
  "\311\323\236\205a\244\321\357\343\203s\260ci\336\211\263",
  "\274\335\307\267\363\213\201\250ce\313\203r\213g\200f\242pack\231\230r\205g\012",
  "po\226\216\365p\335\306t\211\203\304\326c\313\200\215l \370m\231p\335\306t\211\263",
  "\271o m\213\224\302\270t\263",
  "\223k\212w\333\310\361\200(\331\346\235",
  "\310\361\314do \225\350\274\320\242\232\230\205a\244\310\300\271o sm\215l\012",
  "\310(\203do \225\350\274\012",
  "\311l\205\200\315t\205ua\216\012",
  "\311r\213g\354",
  "\311subscript\320\241\200\042[ ]\356\353\227\222\203\327\312j\242\341\233\226\202\263",
  "m\322\207-\341\233\226\202\365\256y\203\304\324f\322l\224\205i\207\215iz\313\012",
  "\250ce\313\376\312ximum nu\236\267\321\341\233\226\202\263",
  "\223\350\274\231\357os\376b\240c\200(\042}\042\235",
  "\230\206\201\321\302bod\224\351\237ou\201\302head\211\012",
  "\256ys\320loc\365\331\314\213\204\302\270t\203\262\324pu\245ic (\331\346\235",
  "\223\272ish\231\250\326\273\327bef\222\200\323mpil\267\341\217c\207v\354",
  "duplic\227\200\270t; sam\200\340\300p\343s\231t\351c\354",
  "\302\340\312\224\225\367\252\232fa\322\201\251u\200(\331\346\235",
  "m\322\207p\362\042#\371se\356\341\217c\207v\314betwe\214 \042#if ... #\214\341f\042\012",
  "\042#\371seif\356\341\217c\207\337f\247low\203\364\042#\371se\356\341\217c\207v\354",
  "nu\236\267\321\353\213d\203do\314\225\336\201\237\200\353\227\222\012",
  "\302\217s\322\201\332\264\321\353\227\222\234 \304\324\221\012",
  "\262\274\213g\200\326\334\231\353\227\222\263",
  "\302\340\312\224\202l\224\367\252s\205g\362\332\264(\340%d\235",
  "\302\340\312\224\225\324\252\217f\211\214c\200\340\242\364\310(\340\221\235",
  "\331\200\262\324bo\375\252\217f\211\214c\200\213\204\364\310(\331\346\235",
  "\311\240\216\365nu\236\267\326ci\226\327\374#p\240g\312\012",
  "\240\216\365nu\236\267f\222\312\201\215\217ad\224\334\313\012",
  "\240\216\365nu\236\267supp\222\201w\352\225\214\276\313\012",
  "\241\211-\334\231\353\227\242\304\324\232\357\206\231bef\222\200\241\200(\373\234\235",
  "\042\361e\277\356\353\227\242\300\311\327\042\373\356\257\263",
  "\302\340\304\324\364\310(\340\221\235",
  "#\334\200p\227t\211\333\304\230\206\201\351\375\364\215p\305be\207c \274\335\307\211\012",
  "\205pu\201l\205\200\271o l\202\264(aft\267subs\207tu\216s\235",
  "\253n\332x \211r\242\374\237\200\250\326\273\202\320\242\311\302c\215l\012",
  "m\215f\222m\231UTF-8 \214\323d\205g\320\242c\222rupt\231\336le: \344",
  "\302\241\314bo\375\042\217turn\356\213\204\042\217tur\333<\251ue>\042\012",
  "\205\315\226\230\214\201\217tur\333\366\203(\310& n\202-\256y\235",
  "\223k\212w\333\257\320\242\225\252\363\213\201\257 \360",
  "\262\332k\200\252\332\264\352\252\232fa\322\201\251u\200f\242\364\205\232x\231\310p\335\306t\267\360",
  "\241\211-\334\231\353\227\222\203\213\204\370\207\337\373\203\312\224\225\367\347e\263",
  "\252\302\242\331\200\312\224\202l\224b\371\202\264\271 \252s\205g\362au\271\350\327\360",
  "\347\200\315fli\307: \202\200\321\237\200\347\314\300\215\217ad\224a\273gn\231\271 a\212\237\267imple\233\332\244\360",
  "\212 \347\314\206\200\334\231f\242\317\012",
  "\223k\212w\333au\271\350\202\345",
  "\223k\212w\333\347\346 f\242au\271\350\202\345",
  "pu\245ic \331\314\213\204loc\365\331\314\312\224\225\367\347\314\360",
  "\347\200\331\314\312\224\225\324\205i\207\215iz\231\360",
  "pu\245ic \373\203\312\224\225\217tur\333\256y\203\360",
  "a\236i\265ou\203\363\213t; \332\264ov\211rid\200\300\217qui\217\204\360",
  "nu\236\267\321\270t\203do\314\225\350\274 \334i\216\012",
  "\250\260\307\231\332\264\370m\200id\214\207\336\211\012",
  "\302\214um\211a\244\217qui\217\203\223iqu\200\332g\012",
  "\262\367\217qui\217\204p\335\306t\211\203aft\267\342\216\365p\335\306t\211\263",
  "\323\322\204\225\272\204\306\236\211\234 \374\230ruc\201\221\012",
  "\317 do\314\225\367\252\350\274\376\366\012",
  "\372\346 sho\322\204\324\221 \374new-\230y\362\232\357\335\216\263",
  "\316sho\322\204\225\367\364\250plici\201\217tur\333\366\012",
  "\302pro\271\366\203do \225\350\274\012",
  "s\260cif\224ei\237\267\215l \341\233\226\202\203\242\202l\224\237\200l\343\201\341\233\226\202\012",
  "\262\272\204\316\344",
  "\316w\352\215\217ad\224\334\231\327\237\300\344",
  "\262\272\204\213\224\306\237od\203f\242\344",
  "\262\272\204\306\237o\204\242pr\353t\224\210.\344",
  "\262c\215l \306\237od\203\327\364\256y\012",
  "\262c\215l \306\237od\203\327\252\373\012",
  "\306\237o\204\304\367\252\336rs\201\340\323mpa\207\245\200\351\375\237\200\316\372\200(\210\235",
  "\316\370m\200\304\230\206\201\351\375\364upp\211c\343\200lett\211\012",
  "\316\305\203\215\217ad\224be\214 \334\231(\326vio\241l\224se\214 \352\210\235",
  "\250\260\307\231id\214\207\336\267- d\275you f\222ge\201\252\366?\012",
  "\363ru\307\242\302\304\217tur\333\332\264\344",
  "\262\334\200\363ru\307\242f\222\234; \215\217ad\224\250i\230\203\352\252\344",
  "miss\376\366\320\242\316\304\367\237\200sam\200\370m\200\352\316\221\012",
  "\262\241\200\232lete\320\316\316\305\203\212 \232\230ru\307\222\012",
  "\212 \306\237od\312p \242\357\343\203w\352fo\223\204f\242\344",
  "\212 \232\230ru\307\242w\352fo\223\204f\242\316\344",
  "\232\230ru\307\222\203\304\324\370\207\337\373\263",
  "\232\230ru\307\222\203\262\367\250t\240 \270t\263",
  "\306\237od\312p \213\204\357\343\203\226gn\227u\217\203\304\241\200new-\230y\362\372\200\232\357\335\216\263",
  "\262s\260cif\224\310\341\233\226\202\203\327bo\375\372\200\213\204\370\306\012",
  "\250\260\307\231\372\200\250\326\273\202\012",
  "f\322ly-qu\215i\336\231\370m\346 \300\271o l\202g\320wo\322\204\324tr\243\227\231\271\345",
  "\223\250\260\307\231\271k\214\320\250\260\307\231\306\237o\204\242pr\353\261\012",
  "\250\260\307\231\042\370\207ve\356\242\042get\042\012",
  "\316f\242\316\215\217ad\224\250i\230\263",
  "pr\353t\224gett\211\203\262accep\201\250t\240 \270t\263",
  "\316\304\367\237\200sam\200\217tur\333\372\200\352pr\353t\224\316(\210\235",
  "\262mix \306\237od\312p\203\213\204\357\343s\314\351\375\205h\211it\213c\354",
  "\262\323\211c\200\373\203\271 \251ue\263",
  "\262\323\211c\200objec\201\372\200\316\271 n\202-objec\201\372\200\344",
  "\262\323\211c\200n\202-objec\201\372\200\316\271 objec\201\372\200\344",
  "\262\323\211c\200\223\217l\227\231objec\201\366\203\316\213\204\344",
  "\372\200mis\350\274 (\316\213\204\210\235",
  "\262\241\200\364objec\201\374\252m\322\207-\332\264s\371e\307\222\012",
  "\256y\203\206\200\225supp\222t\231\352\217tur\333\366\263",
  "\262mix \217f\211\214c\200\213\204\310\366\263",
  "\315s\201w\352s\260ci\336\231t\351c\354",
  "\323\322\204\225\272\204\372\346\012",
  "new-\230y\362\310\366\203\262s\260cif\224\341\233\226\327\361\314\352p\206\201\321\237eir \366\012",
  "\370\207v\314\262\217tur\333\256y\263"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\262\217a\204from \336le:\345",
  "\262writ\200\271 \336le:\345",
  "t\276\200ov\211flow:\345",
  "\205suf\336ci\214\201\306m\222y\012",
  "\311\343se\236l\267\205\230ruc\216\345",
  "num\211ic ov\211flow\320\250ce\313\376capaci\261\012",
  "\323mpil\231scrip\201\250ce\313\203\237\200\312ximum \306m\222\224\361\200(%l\204bytes\235",
  "\271o m\213\224\211r\242\306ssag\314\327\202\200l\205\354",
  "\323\232pag\200\312pp\376\336\362\225fo\223d\012",
  "\311p\227h:\345",
  "\343s\211\244fail\313: \344",
  "\241\267\211r\222: \344"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\317 \300tr\243\227\231\271 %\204\274\335\307\211\263",
  "\217\334i\244\321\363\213t/\312cro \360",
  "nu\236\267\321\270t\203do\314\225\350\274 \334i\216\012",
  "\257 \300nev\267\241\313:\345",
  "\257 \300a\273gn\231\252\251u\200\237a\201\300nev\267\241\313:\345",
  "\217d\223d\213\201\323\232: \363\213\201\250\326\273\327\300z\211o\012",
  "\217d\223d\213\201te\230: \363\213\201\250\326\273\327\300n\202-z\211o\012",
  "\223k\212w\333#p\240g\312\012",
  "\302\351\375\332\264\217s\322\201\241\231bef\222\200\334i\216\320f\222c\376\217p\206s\354",
  "\373\234 sho\322\204\217tur\333\252\251u\354",
  "po\273\245\200\241\200\321\257 bef\222\200\205i\207\215iza\216:\345",
  "po\273\245\224\223\205t\214d\231a\273gn\233t\012",
  "po\273\245\224\223\205t\214d\231bit\351s\200\353a\216\012",
  "\332\264mis\350\274\012",
  "po\273\245\224\252\042\363\356\310\340w\352\205t\214\232d:\345",
  "\250\326\273\327\305\203\212 effe\307\012",
  "ne\230\231\323m\233t\012",
  "loos\200\205d\214\332\216\012",
  "\247\204\230y\362pro\271\366\203\241\231\351\375\342\216\365semic\247umn\263",
  "loc\365\331\346 s\305dow\203\252\331\200a\201\252\326c\313\376lev\371\012",
  "\250\326\273\327\351\375\332\264ov\211rid\200\304ap\260\206 betwe\214 p\206\214\237ese\263",
  "lab\371 \370m\346 s\305dow\203\332\264\370\306\012",
  "nu\236\267\321\341git\203\250ce\313\203\240\216\365nu\236\267\326ci\226\202\012",
  "\217d\223d\213\201\042\361e\277\042: \340\361\200\300\215way\2031 \360",
  "\205\232t\211m\205\227\200\310\361\200\374\042\361e\277\356\250\326\273\327\360",
  "\223\217a\274\276\200\323\232\012",
  "\252\331\200\300a\273gn\231\271 its\371f \360",
  "m\222\200\205i\207\215iz\211\203\237\364\214um \336\371d\263",
  "l\214g\375\321\205i\207\215iz\267\250ce\313\203\361\200\321\237\200\214um \336\371d\012",
  "\205\232x \332\264mis\350\274 \360",
  "\212 imple\233\332\244f\242\347\346 \374\373\234\320\212 f\215l-back\012",
  "\347\200s\260ci\336ca\244\327f\222w\206\204\232\357\335\244\300ig\212\217d\012",
  "outpu\201\336\362\300writt\214\320bu\201\351\375\323mpac\201\214\323d\376\341s\276\313\012",
  "\347\200\331\346 s\305dow\203\252glob\365\331\354",
  "\317 \300m\206k\231\352\232\326c\227\313: \344",
  "pu\245ic \302lack\203f\222w\206\204\232\357\335\244\360",
  "\223k\212w\333p\335\306t\267\374subs\207tu\244(\205c\222\217c\201#\334\200p\227t\211n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
