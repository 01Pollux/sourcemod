/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {100,32}, {105,110}, {97,114}, {116,105}, {37,115}, {101,114}, {110,111}, {97,110}, {101,110}, {97,108}, {135,130}, {114,101},
  {34,136}, {144,34}, {111,114}, {117,110}, {121,32}, {138,129}, {115,105}, {115,116}, {97,116}, {100,101}, {101,132}, {109,140}, {32,145}, {41,10}, {109,98}, {116,104},
  {114,97}, {147,99}, {117,115}, {146,32}, {98,108}, {161,142}, {102,165}, {111,108}, {101,120}, {118,141}, {97,32}, {115,121}, {116,121}, {99,139}, {171,158}, {134,160},
  {174,167}, {112,101}, {173,149}, {115,10}, {103,32}, {103,117}, {181,155}, {137,32}, {134,182}, {116,111}, {102,133}, {105,132}, {115,150}, {104,97}, {169,187}, {111,102},
  {99,104}, {105,131}, {162,129}, {44,32}, {166,32}, {97,164}, {133,190}, {109,194}, {109,101}, {99,116}, {175,148}, {109,97}, {101,100}, {117,108}, {99,130}, {37,131},
  {97,142}, {176,156}, {191,32}, {99,111}, {98,128}, {101,131}, {118,134}, {112,143}, {130,32}, {105,197}, {214,217}, {118,128}, {110,32}, {153,186}, {102,105}, {184,129},
  {100,105}, {99,108}, {111,112}, {97,115}, {136,10}, {156,10}, {128,145}, {109,152}, {151,152}, {116,97}, {119,105}, {108,128}, {97,131}, {226,137}, {101,10}, {209,157},
  {34,32}, {189,219}, {40,239}, {172,112}, {150,122}, {206,151}, {139,32}, {141,32}, {172,177}, {110,97}, {101,108}, {243,128}, {139,132}, {102,146}, {133,32}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method or property %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style type declarations\n",
/*121*/  "cannot specify array dimensions on both type and name\n",
/*122*/  "expected type expression\n",
/*123*/  "fully-qualified name \"%s\" is too long, would be truncated to \"%s\"\n",
/*124*/  "unexpected token, expected method or property\n",
/*125*/  "expected \"native\" or \"get\"\n",
/*126*/  "%s for %s already exists\n",
/*127*/  "property getters cannot accept extra arguments\n",
/*128*/  "%s must have the same return type as property %s (%s)\n",
/*129*/  "cannot mix methodmaps and classes with inheritance\n",
/*130*/  "cannot coerce functions to values\n",
/*131*/  "cannot coerce object type %s to non-object type %s\n",
/*132*/  "cannot coerce non-object type %s to object type %s\n",
/*133*/  "cannot coerce unrelated object types %s and %s\n",
/*134*/  "type mismatch (%s and %s)\n",
/*135*/  "cannot use an object in a multi-tag selector\n",
/*136*/  "arrays are not supported as return types\n",
/*137*/  "cannot mix reference and array types\n",
/*138*/  "const was specified twice\n",
/*139*/  "could not find type \"%s\"\n",
/*140*/  "new-style array types cannot specify dimension sizes as part of their type\n",
/*141*/  "natives, forwards, and public functions cannot return arrays\n",
/*142*/  "invalid type declaration\n",
/*143*/  "new-style declarations should not have \"new\"\n",
/*144*/  "void cannot be used as a variable type\n",
/*145*/  "invalid type expression\n",
#else
  "\250\261\311\232\271k\214:\234\303bu\201fo\223\204\221\012",
  "\202l\224\252s\205g\353\350e\233\201(\243\250\327\274\202) \255 f\247low ea\300 \042c\343e\042\012",
  "\231\341\206\320 \322\252loc\367\332\200\307ap\261\206 \376\252\323mpo\223\204\244ock\012",
  "\246\234 \301\225imple\233t\314\012",
  "\304\313\224\225\361\270t\263",
  "\307\324a\274gn\232\271 \366\257y\012",
  "\355\230\243\262\324\217\335\314\012",
  "\307\324\252\365\213\201\250\327\274\202; \343sum\232z\211o\012",
  "\306\312\364\200(nega\207ve\303z\211o \243ou\201\322bo\223ds\235",
  "\306\304\243\231\341\206\320\012",
  "\306out\226d\200\246\263",
  "\306\304c\215l\303\225\252\276add\217s\263",
  "\212 \214tr\224po\205\201(\212 pu\244ic \246s\235",
  "\306\350e\233t; \225\376s\352t\300\012",
  "\042\231fa\315t\360c\343\200\307\324\237\200l\343\201c\343\200\376s\352t\300 \350e\233t\012",
  "m\315\207p\353\231fa\315t\203\376\042s\352t\300\042\012",
  "\223\335\232\321\012",
  "\205i\207\215iz\320 d\230\252\250ce\314\203\231\341\206\232\364\356",
  "\225\252lab\372:\345",
  "\306\260 \371m\346\012",
  "\260 \215\217ad\224\335\314:\345",
  "\307\324l\251u\200(n\202-\365\213t\235",
  "\312a\274gn\233\201\307\324\226mp\353a\274gn\233t\012",
  "\042b\217ak\360\243\042\316t\205ue\360\301ou\201\322\316t\250t\012",
  "\304head\205\264\340ff\211\203from pro\271\370\012",
  "\212 \347\300\205\264\042#if...\042\012",
  "\306\300\206a\311\267\365\213t\012",
  "\306subscrip\201(\225\366\312\243\271o m\213\224subscripts):\345",
  "\306\250\327\274\202\303\343sum\232z\211o\012",
  "\323mpo\223\204\350e\233\201\225\341os\232a\201\237\200\214\204\322\336\353(\227\206t\232a\201l\205\200%d\235",
  "\223k\212w\334\340\217c\207v\356",
  "\312\205\231x ou\201\322bo\223d\203(\332\346\235",
  "\312\307\324\205\231x\232(\332\346\235",
  "\337do\325\225\361\252\231fa\315\201\251u\200(\337%d\235",
  "\337\373mis\347\300 (\337%d\235",
  "empt\224\350e\233t\012",
  "\306\227r\205\264(po\274\244\224n\202-t\211m\205\230\232\227r\205g\235",
  "\250t\240 \300\206a\311\211\203\330l\205\356",
  "\365\213\201\260 \275\203\212 \364\356",
  "duplic\230\200\042c\343e\360lab\372 (\251u\200%d\235",
  "\306\372lip\226s\303\312\364\200\301\225k\212wn\012",
  "\306\323\236\205\320 \322\341\343\203s\261ci\336\211\263",
  "\300\206a\311\267\365\213\201\250ce\314\203r\213g\200f\243pack\232\227r\205g\012",
  "po\226\216\367p\206a\310t\211\203\307\327c\314\200\215l \371m\232p\206a\310t\211\263",
  "\271o m\213\224\304\270t\263",
  "\223k\212w\334\312\364\200(\332\346\235",
  "\312\364\325do \225\347\300\303\243\231\227\205\320 \312\301\271o sm\215l\012",
  "\312(\203do \225\347\300\012",
  "\306l\205\200\316t\205u\320\012",
  "\306r\213g\356",
  "\306subscript\303\242\200\042[ ]\360\355\230\222\203\330\313j\243\340\233\226\202\263",
  "m\315\207-\340\233\226\202\367\257y\203\307\324f\315l\224\205i\207\215iz\314\012",
  "\250ce\314\205\264\313ximum nu\236\267\322\340\233\226\202\263",
  "\223\347\300\232\341os\205\264b\240c\200(\042}\042\235",
  "\227\206\201\322\304bod\224\352\237ou\201\304head\211\012",
  "\257ys\303loc\367\332\325\374\304\270t\203\262\324pu\244ic (\332\346\235",
  "\223\272ish\232\250\327\274\330be\375\200\323mpil\267\340\217c\207v\356",
  "duplic\230\200\270t; sam\200\337\301p\343s\232t\352c\356",
  "\304\337\313\224\225\361\252\231fa\315\201\251u\200(\332\346\235",
  "m\315\207p\353\042#\372se\360\340\217c\207v\325betwe\214 \042#if ... #\214\340f\042\012",
  "\042#\372seif\360\340\217c\207\333f\247low\203\366\042#\372se\360\340\217c\207v\356",
  "nu\236\267\322\355\213d\203do\325\225\336\201\237\200\355\230\222\012",
  "\304\217s\315\201\351\264\322\355\230\222\234 \307\324\221\012",
  "\262\300\213g\200\327\335\232\355\230\222\263",
  "\304\337\313\224\202l\224\361\252s\205g\353\351\264(\337%d\235",
  "\304\337\313\224\225\324\252\217f\211\214c\200\337\243\366\312(\337\221\235",
  "\332\200\262\324bo\237 \252\217f\211\214c\200\374\366\312(\332\346\235",
  "\306\240\216\367nu\236\267\327ci\226\330\376#p\240g\313\012",
  "\240\216\367nu\236\267\375\313\201\215\217ad\224\335\314\012",
  "\240\216\367nu\236\267supp\222\201w\354\225\214\305\314\012",
  "\242\211-\335\232\355\230\243\307\324\231\341\206\232be\375\200\242\200(\246\234\235",
  "\042\364e\277\360\355\230\243\301\306\330\042\246\360\260\263",
  "\304\337\307\324\366\312(\337\221\235",
  "#\335\200p\230t\211\334\307\227\206\201\352\237 \366\215p\275be\207c \300\206a\311\211\012",
  "\205pu\201l\205\200\271o l\202\264(aft\267subs\207tu\216s\235",
  "\253n\351x \211r\243\376\237\200\250\327\274\202\303\243\306\304c\215l\012",
  "m\215\375m\232UTF-8 \214\323d\205g\303\243c\222rupt\232\336le: \344",
  "\304\242\325bo\237 \042\217turn\360\374\042\217tur\334<\251ue>\042\012",
  "\205\316\226\227\214\201\217tur\334\370\203(\312& n\202-\257y\235",
  "\223k\212w\334\260\303\243\225\252\365\213\201\260 \362",
  "\262\351k\200\252\351\264\354\252\231fa\315\201\251u\200f\243\366\205\231x\232\312p\206a\310t\267\362",
  "\242\211-\335\232\355\230\222\203\374\371\207\333\246\203\313\224\225\361\350e\263",
  "\252\304\243\332\200\313\224\202l\224b\372\202\264\271 \252s\205g\353au\271\347\330\362",
  "\350\200\316fli\311: \202\200\322\237\200\350\325\301\215\217ad\224a\274gn\232\271 a\212\237\267imple\233t\320 \362",
  "\212 \350\325\206\200\335\232f\243\321\012",
  "\223k\212w\334au\271\347\202\345",
  "\223k\212w\334\350\346 f\243au\271\347\202\345",
  "pu\244ic \332\325\374loc\367\332\325\313\224\225\361\350\325\362",
  "\350\200\332\325\313\224\225\324\205i\207\215iz\232\362",
  "pu\244ic \246\203\313\224\225\217tur\334\257y\203\362",
  "a\236i\265ou\203\365\213t; \351\264ov\211rid\200\301\217qui\217\204\362",
  "nu\236\267\322\270t\203do\325\225\347\300 \335i\216\012",
  "\250\261\311\232\351\264\371m\200id\214\207\336\211\012",
  "\304\214um\211\320 \217qui\217\203\223iqu\200\351g\012",
  "\262\361\217qui\217\204p\206a\310t\211\203aft\267\342\216\367p\206a\310t\211\263",
  "\323\315\204\225\272\204\310\236\211\234 \376\227ruc\201\221\012",
  "\321 do\325\225\361\252\347\300\205\264\370\012",
  "\363\346 sho\315\204\324\221 \376new-\227y\353\231\341\206\320\263",
  "\317sho\315\204\225\361\366\250plici\201\217tur\334\370\012",
  "\304pro\271\370\203do \225\347\300\012",
  "s\261cif\224ei\237\267\215l \340\233\226\202\203\243\202l\224\237\200l\343\201\340\233\226\202\012",
  "\262\272\204\317\344",
  "\317w\354\215\217ad\224\335\232\330\237\301\344",
  "\262\272\204\213\224\310\237od\203f\243\344",
  "\262\272\204\310\237o\204\243pr\355t\224\210.\344",
  "\262c\215l \310\237od\203\330\366\257y\012",
  "\262c\215l \310\237od\203\330\252\246\012",
  "\310\237o\204\307\361\252\336rs\201\337\323mpa\207\244\200\352\237 \237\200\317\373(\210\235",
  "\317\371m\200\307\227\206\201\352\237 \366upp\211c\343\200lett\211\012",
  "\317\275\203\215\217ad\224be\214 \335\232(\327vio\242l\224se\214 \354\210\235",
  "\250\261\311\232id\214\207\336\267- d\273you \375ge\201\252\370?\012",
  "\365ru\311\243\304\307\217tur\334\351\264\344",
  "\262\335\200\365ru\311\243\375\234; \215\217ad\224\250i\227\203\354\252\344",
  "miss\205\264\370\303\243\317\307\361\237\200sam\200\371m\200\354\317\221\012",
  "\262\242\200\231lete\303\317\317\275\203\212 \231\227ru\311\222\012",
  "\212 \310\237od\313p \243\341\343\203w\354fo\223\204f\243\344",
  "\212 \231\227ru\311\243w\354fo\223\204f\243\317\344",
  "\231\227ru\311\222\203\307\324\371\207\333\246\263",
  "\231\227ru\311\222\203\262\361\250t\240 \270t\263",
  "\310\237od\313p \374\341\343\203\226gn\230u\217\203\307\242\200new-\227y\353\373\231\341\206\320\263",
  "\262s\261cif\224\312\340\233\226\202\203\330bo\237 \373\374\371\310\012",
  "\250\261\311\232\373\250\327\274\202\012",
  "f\315ly-qu\215i\336\232\371m\346 \301\271o l\202g\303wo\315\204\324tr\241\230\232\271\345",
  "\223\250\261\311\232\271k\214\303\250\261\311\232\310\237o\204\243pr\355\254\012",
  "\250\261\311\232\042\371\207ve\360\243\042get\042\012",
  "\317f\243\317\215\217ad\224\250i\227\263",
  "pr\355t\224gett\211\203\262accep\201\250t\240 \270t\263",
  "\317\307\361\237\200sam\200\217tur\334\373\354pr\355t\224\317(\210\235",
  "\262mix \310\237od\313p\203\374\341\343s\325\352\237 \205h\211it\213c\356",
  "\262\323\211c\200\246\203\271 \251ue\263",
  "\262\323\211c\200objec\201\373\317\271 n\202-objec\201\373\344",
  "\262\323\211c\200n\202-objec\201\373\317\271 objec\201\373\344",
  "\262\323\211c\200\223\217l\230\232objec\201\370\203\317\374\344",
  "\373mis\347\300 (\317\374\210\235",
  "\262\242\200\366objec\201\376\252m\315\207-\351\264s\372e\311\222\012",
  "\257y\203\206\200\225supp\222t\232\354\217tur\334\370\263",
  "\262mix \217f\211\214c\200\374\312\370\263",
  "\316s\201w\354s\261ci\336\232t\352c\356",
  "\323\315\204\225\272\204\363\346\012",
  "new-\227y\353\312\370\203\262s\261cif\224\340\233\226\330\364\325\354p\206\201\322\237eir \370\012",
  "\371\207ves\303\375w\206ds\303\374pu\244ic \246\203\262\217tur\334\257y\263",
  "\306\373\231\341\206\320\012",
  "new-\227y\353\231\341\206\320\203sho\315\204\225\361\042new\042\012"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\262\217a\204from \336le:\345",
  "\262writ\200\271 \336le:\345",
  "t\305\200ov\211flow:\345",
  "\205suf\336ci\214\201\310m\222y\012",
  "\306\343se\236l\267\205\227ruc\216\345",
  "num\211ic ov\211flow\303\250ce\314\205\264capaci\254\012",
  "\323mpil\232scrip\201\250ce\314\203\237\200\313ximum \310m\222\224\364\200(%l\204bytes\235",
  "\271o m\213\224\211r\243\310ssag\325\330\202\200l\205\356",
  "\323\231pag\200\313pp\205\264\336\353\225fo\223d\012",
  "\306p\230h:\345",
  "\343s\211\216 fail\314: \344",
  "\242\267\211r\222: \344"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\321 \301tr\241\230\232\271 %\204\300\206a\311\211\263",
  "\217\335i\216 \322\365\213t/\313cro \362",
  "nu\236\267\322\270t\203do\325\225\347\300 \335i\216\012",
  "\260 \301nev\267\242\314:\345",
  "\260 \301a\274gn\232\252\251u\200\237a\201\301nev\267\242\314:\345",
  "\217d\223d\213\201\323\231: \365\213\201\250\327\274\330\301z\211o\012",
  "\217d\223d\213\201te\227: \365\213\201\250\327\274\330\301n\202-z\211o\012",
  "\223k\212w\334#p\240g\313\012",
  "\304\352\237 \351\264\217s\315\201\242\232be\375\200\335i\216\303\375c\205\264\217p\206s\356",
  "\246\234 sho\315\204\217tur\334\252\251u\356",
  "po\274\244\200\242\200\322\260 be\375\200\205i\207\215iz\320:\345",
  "po\274\244\224\223\205t\214\231\204a\274gn\233t\012",
  "po\274\244\224\223\205t\214\231\204bit\352s\200\355\320\012",
  "\351\264mis\347\300\012",
  "po\274\244\224\252\042\365\360\312\337w\354\205t\214\231d:\345",
  "\250\327\274\330\275\203\212 effe\311\012",
  "ne\227\232\323m\233t\012",
  "loos\200\205d\214t\320\012",
  "\247\204\227y\353pro\271\370\203\242\232\352\237 \342\216\367semic\247umn\263",
  "loc\367\332\346 s\275dow\203\252\332\200a\201\252\327c\314\205\264lev\372\012",
  "\250\327\274\330\352\237 \351\264ov\211rid\200\307ap\261\206 betwe\214 p\206\214\237ese\263",
  "lab\372 \371m\346 s\275dow\203\351\264\371\310\012",
  "nu\236\267\322\340git\203\250ce\314\203\240\216\367nu\236\267\327ci\226\202\012",
  "\217d\223d\213\201\042\364e\277\042: \337\364\200\301\215way\2031 \362",
  "\205\231t\211m\205\230\200\312\364\200\376\042\364e\277\360\250\327\274\330\362",
  "\223\217ac\275\244\200\323\231\012",
  "\252\332\200\301a\274gn\232\271 its\372f \362",
  "m\222\200\205i\207\215iz\211\203\237\366\214um \336\372d\263",
  "l\214g\237 \322\205i\207\215iz\267\250ce\314\203\364\200\322\237\200\214um \336\372d\012",
  "\205\231x \351\264mis\347\300 \362",
  "\212 imple\233t\320 f\243\350\346 \376\246\234\303\212 f\215l-back\012",
  "\350\200s\261ci\336c\320 \330\375w\206\204\231\341\206\320 \301ig\212\217d\012",
  "outpu\201\336\353\301writt\214\303bu\201\352\237 \323mpac\201\214\323d\205\264\340s\305\314\012",
  "\350\200\332\346 s\275dow\203\252glob\367\332\356",
  "\321 \301m\206k\232\354\231\327c\230\314: \344",
  "pu\244ic \304lack\203\375w\206\204\231\341\206\320 \362",
  "\223k\212w\334p\206a\310t\267\376subs\207tu\216 (\205c\222\217c\201#\335\200p\230t\211n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
