/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {105,110}, {100,32}, {97,114}, {116,105}, {37,115}, {101,114}, {101,110}, {97,108}, {110,111}, {135,130}, {34,136}, {142,34},
  {111,114}, {114,101}, {117,110}, {97,110}, {121,32}, {115,116}, {115,105}, {97,116}, {100,101}, {140,129}, {101,133}, {32,143}, {117,109}, {41,10}, {116,104}, {144,32},
  {98,108}, {117,115}, {141,32}, {146,99}, {114,97}, {98,111}, {102,163}, {101,120}, {115,121}, {118,139}, {97,32}, {109,165}, {168,171}, {172,108}, {103,32}, {156,138},
  {137,32}, {103,175}, {134,177}, {105,131}, {115,150}, {134,164}, {105,133}, {102,132}, {115,10}, {97,160}, {99,104}, {161,129}, {166,162}, {169,182}, {109,187}, {104,97},
  {101,100}, {111,102}, {116,111}, {132,189}, {112,101}, {99,116}, {173,155}, {44,32}, {109,97}, {109,101}, {98,128}, {99,130}, {118,134}, {112,145}, {99,147}, {193,32},
  {105,185}, {204,208}, {116,97}, {109,138}, {181,148}, {206,153}, {152,183}, {134,97}, {117,108}, {118,128}, {101,131}, {178,129}, {130,32}, {102,105}, {111,112}, {116,121},
  {37,131}, {155,10}, {149,151}, {110,32}, {99,111}, {97,115}, {222,137}, {128,143}, {109,151}, {198,157}, {34,32}, {100,105}, {40,233}, {203,149}, {139,32}, {191,217},
  {119,105}, {99,108}, {150,122}, {108,128}, {136,10}, {101,10}, {147,32}, {132,174}, {98,101}, {158,128}, {97,131}, {166,141}, {102,144}, {111,32}, {132,32}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method or property %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style type declarations\n",
/*121*/  "this syntax is not yet supported\n",
/*122*/  "expected type expression\n",
/*123*/  "fully-qualified name \"%s\" is too long, would be truncated to \"%s\"\n",
/*124*/  "unexpected token, expected method or property\n",
/*125*/  "expected \"native\" or \"get\"\n",
/*126*/  "%s for %s already exists\n",
/*127*/  "property getters cannot accept extra arguments\n",
/*128*/  "%s must have the same return type as property %s (%s)\n",
#else
  "\247\304\305\232\302k\212:\233\307bu\201fo\222\205\217\012",
  "\202l\224\252s\204g\363\342e\323\201(\237\247\315\264\202) \316 follow ea\272 \042c\345e\042\012",
  "\230\361\327\242\317\252loc\356\321\200\276ap\304\206 \376\252\344mpo\222\205\240ock\012",
  "\373\233 \263\231imple\323t\300\012",
  "\274\310\224\231\357\262t\270",
  "\276\312a\264gn\232\302 \366\265y\012",
  "\346\227\237\325\312\221\326\300\012",
  "\276\312\252\355\223\201\247\315\264\202; \345s\234\232z\211o\012",
  "\303\324\362\200(nega\207ve\307z\211\375\237ou\201\317\245\222ds\235",
  "\303\274\237\230\361\327\215\012",
  "\303out\226d\200\373\270",
  "\303\274c\213l\307\231\252\275add\221s\270",
  "\214 \212tr\224po\204\201(\214 pu\240ic \373s\235",
  "\303\342e\323t; \231\376s\360t\272\012",
  "\042\230fa\330t\352c\345\200\276\312\371l\345\201c\345\200\376s\360t\272 \342e\323t\012",
  "m\330\207p\363\230fa\330t\203\376\042s\360t\272\042\012",
  "\222\326\232\306\012",
  "\204i\207\213iza\242d\227\252\247ce\300\203\230\361\206\232\362\365",
  "\231\252la\370l:\341",
  "\303\255 nam\347\012",
  "\255 \213\221ad\224\326\300:\341",
  "\276\312l\251u\200(n\202-\355\223t\235",
  "\324a\264gn\323\201\276\312\226mp\363a\264gn\323t\012",
  "\042b\221ak\352\237\042\313t\204ue\352\263ou\201\317\313t\247t\012",
  "\274head\367\353ff\211\203from pro\302\337\304\012",
  "\214 \350\272\367\042#if...\042\012",
  "\303\272\327\305\260\355\223t\012",
  "\303subscrip\201(\231\366\324\237\302\375m\223\224subscripts):\341",
  "\303\247\315\264\202\307\345s\234\232z\211o\012",
  "\344mpo\222\205\342e\323\201\231\361os\232a\201\371\212\205\317\335\363(\225\206t\232a\201l\204\200%d\235",
  "\222k\214w\343\353\221c\207v\365",
  "\324\204\230x ou\201\317\245\222d\203(\321\347\235",
  "\324\276\312\204\230x\232(\321\347\235",
  "\333do\332\231\357\252\230fa\330\201\251u\200(\333%d\235",
  "\333\337p\200mis\350\272 (\333%d\235",
  "empt\224\342e\323t\012",
  "\303\225r\367(po\264\240\224n\202-t\211m\204\227\232\225r\204g\235",
  "\247t\244 \272\327\305\211\203\334l\204\365",
  "\355\223\201\255 \277\203\214 \362\365",
  "duplic\227\200\042c\345e\352la\370l (\251u\200%d\235",
  "\303ellip\226s\307\324\362\200\263\231k\214wn\012",
  "\303\344mb\204a\242\317\361\345\203s\304ci\335\211\270",
  "\272\327\305\260\355\223\201\247ce\300\203r\223g\200f\237pack\232\225r\204g\012",
  "po\226\215\356p\327\311t\211\203\276\315c\300\200\213l nam\232p\327\311t\211\270",
  "\302\375m\223\224\274\262t\270",
  "\222k\214w\343\324\362\200(\321\347\235",
  "\324\362\332d\375\231\350\272\307\237\230\225\204a\242\324\263\302\375sm\213l\012",
  "\324(\203d\375\231\350\272\012",
  "\303l\204\200\313t\204ua\215\012",
  "\303r\223g\365",
  "\303subscript\307\241\200\042[ ]\352\346\227\220\203\334\310j\237\353\323\226\202\270",
  "m\330\207-\353\323\226\202\356\265y\203\276\312f\330l\224\204i\207\213iz\300\012",
  "\247ce\300\367\310xim\234 n\234b\260\317\353\323\226\202\270",
  "\222\350\272\232\361os\367b\244c\200(\042}\042\235",
  "\225\206\201\317\274\245d\224\360\236ou\201\274head\211\012",
  "\265ys\307loc\356\321\332\223\205\274\262t\203\325\312pu\240ic (\321\347\235",
  "\222\267ish\232\247\315\264\334\370\374\200\344mpil\260\353\221c\207v\365",
  "duplic\227\200\262t; sam\200\333\263p\345s\232t\360c\365",
  "\274\333\310\224\231\357\252\230fa\330\201\251u\200(\321\347\235",
  "m\330\207p\363\042#else\352\353\221c\207v\332\370twe\212 \042#if ... #\212\353f\042\012",
  "\042#elseif\352\353\221c\207\331follow\203\366\042#else\352\353\221c\207v\365",
  "n\234b\260\317\346\223d\203do\332\231\335\201\371\346\227\220\012",
  "\274\221s\330\201\322\256\317\346\227\220\233 \276\312\217\012",
  "\325\272\223g\200\315\326\232\346\227\220\270",
  "\274\333\310\224\202l\224\357\252s\204g\363\322\256(\333%d\235",
  "\274\333\310\224\231\312\252\221f\211\212c\200\333\237\366\324(\333\217\235",
  "\321\200\325\312\245\236 \252\221f\211\212c\200\223\205\366\324(\321\347\235",
  "\303\244\215\356n\234b\260\315ci\226\334\376#p\244g\310\012",
  "\244\215\356n\234b\260\374\310\201\213\221ad\224\326\300\012",
  "\244\215\356n\234b\260supp\220\201w\372\231\212\271\300\012",
  "\241\211-\326\232\346\227\237\276\312\230\361\206\232\370\374\200\241\200(\373\233\235",
  "\042\362e\301\352\346\227\237\263\303\334\042\373\352\255\270",
  "\274\333\276\312\366\324(\333\217\235",
  "#\326\200p\227t\211\343\276\225\206\201\360\236 \366\213p\277\370\207c \272\327\305\211\012",
  "\204pu\201l\204\200\302\375l\202\256(aft\260subs\207tu\215s\235",
  "\250n\322x \211r\237\376\371\247\315\264\202\307\237\303\274c\213l\012",
  "m\213\374m\232UTF-8 \212\344d\204g\307\237c\220rupt\232\335le: \364",
  "\274\241\332\245\236 \042\221turn\352\223\205\042\221tur\343<\251ue>\042\012",
  "\204\313\226\225\212\201\221tur\343\337\304\203(\324& n\202-\265y\235",
  "\222k\214w\343\255\307\237\231\252\355\223\201\255 \354",
  "\325\322k\200\252\322\256\372\252\230fa\330\201\251u\200f\237\366\204\230x\232\324p\327\311t\260\354",
  "\241\211-\326\232\346\227\220\203\223\205na\207\331\373\203\310\224\231\357\342e\270",
  "\252\274\237\321\200\310\224\202l\224\370l\202\256\302 \252s\204g\363au\302\350\334\354",
  "\342\200\313fli\305: \202\200\317\371\342\332\263\213\221ad\224a\264gn\232\302 a\214\236\260imple\323\322\242\354",
  "\214 \342\332\206\200\326\232f\237\306\012",
  "\222k\214w\343au\302\350\202\341",
  "\222k\214w\343\342\347 f\237au\302\350\202\341",
  "pu\240ic \321\332\223\205loc\356\321\332\310\224\231\357\342\332\354",
  "\342\200\321\332\310\224\231\312\204i\207\213iz\232\354",
  "pu\240ic \373\203\310\224\231\221tur\343\265y\203\354",
  "ambiguou\203\355\223t; \322\256ov\211rid\200\263\221qui\221\205\354",
  "n\234b\260\317\262t\203do\332\231\350\272 \326i\215\012",
  "\247\304\305\232\322\256nam\200id\212\207\335\211\012",
  "\274\212\234\211a\242\221qui\221\203\222iqu\200\322g\012",
  "\325\357\221qui\221\205p\327\311t\211\203aft\260\336\215\356p\327\311t\211\270",
  "\344\330\205\231\267\205\311mb\211\233 \376\225ruc\201\217\012",
  "\306 do\332\231\357\252\350\272\367\337\304\012",
  "\337p\347 sho\330\205\312\217 \376new-\225y\363\230\361\327\215\270",
  "\340sho\330\205\231\357\366\247plici\201\221tur\343\337\304\012",
  "\274pro\302\337\304\203d\375\231\350\272\012",
  "s\304cif\224ei\236\260\213l \353\323\226\202\203\237\202l\224\371l\345\201\353\323\226\202\012",
  "\325\267\205\340\364",
  "\340w\372\213\221ad\224\326\232\334\236\263\364",
  "\325\267\205\223\224\311\236od\203f\237\364",
  "\325\267\205\311\236o\205\237pr\346t\224\210.\364",
  "\325c\213l \311\236od\203\334\366\265y\012",
  "\325c\213l \311\236od\203\334\252\373\012",
  "\311\236o\205\276\357\252\335rs\201\333\344mpa\207\240\200\360\236 \371\340\337p\200(\210\235",
  "\340nam\200\276\225\206\201\360\236 \366upp\211c\345\200lett\211\012",
  "\340\277\203\213\221ad\224\370\212 \326\232(\315vio\241l\224se\212 \372\210\235",
  "\247\304\305\232id\212\207\335\260- d\266you \374ge\201\252\337\304?\012",
  "\355ru\305\237\274\276\221tur\343\322\256\364",
  "\325\326\200\355ru\305\237\374\233; \213\221ad\224\247i\225\203\372\252\364",
  "miss\367\337\304\307\237\340\276\357\371sam\200nam\200\372\340\217\012",
  "\325\241\200\230lete\307\340\340\277\203\214 \230\225ru\305\220\012",
  "\214 \311\236od\310p \237\361\345\203w\372fo\222\205f\237\364",
  "\214 \230\225ru\305\237w\372fo\222\205f\237\340\364",
  "\230\225ru\305\220\203\276\312na\207\331\373\270",
  "\230\225ru\305\220\203\325\357\247t\244 \262t\270",
  "\311\236od\310p \223\205\361\345\203\226gn\227u\221\203\276\241\200new-\225y\363\337p\200\230\361\327\215\270",
  "\236\263\250n\322x \263\231ye\201supp\220t\300\012",
  "\247\304\305\232\337p\200\247\315\264\202\012",
  "f\330ly-qu\213i\335\232nam\347 \263\302\375l\202g\307wo\330\205\312tr\243\227\232\302\341",
  "\222\247\304\305\232\302k\212\307\247\304\305\232\311\236o\205\237pr\346\337\012",
  "\247\304\305\232\042na\207ve\352\237\042get\042\012",
  "\340f\237\340\213\221ad\224\247i\225\270",
  "pr\346t\224gett\211\203\325accep\201\247t\244 \262t\270",
  "\340\276\357\371sam\200\221tur\343\337p\200\372pr\346t\224\340(\210\235"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\325\221a\205from \335le:\341",
  "\325writ\200\302 \335le:\341",
  "t\271\200ov\211flow:\341",
  "\204suf\335ci\212\201\311m\220y\012",
  "\303\345sem\240\260\204\225ruc\215\341",
  "n\234\211ic ov\211flow\307\247ce\300\367capaci\337\012",
  "\344mpil\232scrip\201\247ce\300\203\371\310xim\234 \311m\220\224\362\200(%l\205bytes\235",
  "\302\375m\223\224\211r\237\311ssag\332\334\202\200l\204\365",
  "\344\230pag\200\310pp\367\335\363\231fo\222d\012",
  "\303p\227h:\341",
  "\345s\211\242fail\300: \364",
  "\241\260\211r\220: \364"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\306 \263tr\243\227\232\302 %\205\272\327\305\211\270",
  "\221\326i\242\317\355\223t/\310cr\375\354",
  "n\234b\260\317\262t\203do\332\231\350\272 \326i\215\012",
  "\255 \263nev\260\241\300:\341",
  "\255 \263a\264gn\232\252\251u\200\236a\201\263nev\260\241\300:\341",
  "\221d\222d\223\201\344\230: \355\223\201\247\315\264\334\263z\211o\012",
  "\221d\222d\223\201te\225: \355\223\201\247\315\264\334\263n\202-z\211o\012",
  "\222k\214w\343#p\244g\310\012",
  "\274\360\236 \322\256\221s\330\201\241\232\370\374\200\326i\215\307\374c\367\221p\206s\365",
  "\373\233 sho\330\205\221tur\343\252\251u\365",
  "po\264\240\200\241\200\317\255 \370\374\200\204i\207\213iza\215:\341",
  "po\264\240\224\222\204t\212\230\205a\264gn\323t\012",
  "po\264\240\224\222\204t\212\230\205bit\360s\200\346a\215\012",
  "\322\256mis\350\272\012",
  "po\264\240\224\252\042\355\352\324\333w\372\204t\212\230d:\341",
  "\247\315\264\334\277\203\214 effe\305\012",
  "ne\225\232\344m\323t\012",
  "loos\200\204d\212\322\215\012",
  "ol\205\225y\363pro\302\337\304\203\241\232\360\236 \336\215\356semi\344l\234n\270",
  "loc\356\321\347 s\277dow\203\252\321\200a\201\252\315c\300\367level\012",
  "\247\315\264\334\360\236 \322\256ov\211rid\200\276ap\304\206 \370twe\212 p\206\212\236ese\270",
  "la\370l nam\347 s\277dow\203\322\256na\311\012",
  "n\234b\260\317\353git\203\247ce\300\203\244\215\356n\234b\260\315ci\226\202\012",
  "\221d\222d\223\201\042\362e\301\042: \333\362\200\263\213way\2031 \354",
  "\204\230t\211m\204\227\200\324\362\200\376\042\362e\301\352\247\315\264\334\354",
  "\222\221a\272\271\200\344\230\012",
  "\252\321\200\263a\264gn\232\302 itself \354",
  "m\220\200\204i\207\213iz\211\203\236\366\212\234 \335eld\270",
  "l\212g\236 \317\204i\207\213iz\260\247ce\300\203\362\200\317\371\212\234 \335eld\012",
  "\204\230x \322\256mis\350\272 \354",
  "\214 imple\323\322\242f\237\342\347 \376\373\233\307\214 f\213l-back\012",
  "\342\200s\304ci\335ca\242\334\374w\206\205\230\361\327\242\263ig\214\221d\012",
  "outpu\201\335\363\263writt\212\307bu\201\360\236 \344mpac\201\212\344d\367\353s\271\300\012",
  "\342\200\321\347 s\277dow\203\252glob\356\321\365",
  "\306 \263m\206k\232\372\230\315c\227\300: \364",
  "pu\240ic \274lack\203\374w\206\205\230\361\327\242\354",
  "\222k\214w\343p\327\311t\260\376subs\207tu\242(\204c\220\221c\201#\326\200p\227t\211n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
