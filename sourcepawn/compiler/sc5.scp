/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {100,32}, {97,114}, {105,110}, {116,105}, {37,115}, {101,114}, {110,111}, {97,110}, {135,130}, {97,108}, {101,110}, {114,101},
  {117,110}, {111,114}, {34,136}, {146,34}, {138,129}, {121,32}, {115,105}, {115,116}, {100,101}, {97,116}, {101,132}, {109,142}, {32,147}, {41,10}, {109,98}, {116,104},
  {114,97}, {117,115}, {144,99}, {98,108}, {162,140}, {145,32}, {102,164}, {97,32}, {116,121}, {101,120}, {99,139}, {118,141}, {111,108}, {170,148}, {112,101}, {115,121},
  {175,158}, {133,160}, {176,172}, {115,10}, {115,150}, {103,32}, {116,111}, {105,132}, {103,117}, {184,155}, {137,32}, {97,163}, {133,185}, {102,134}, {171,183}, {99,104},
  {161,129}, {166,32}, {134,190}, {109,192}, {104,97}, {111,102}, {117,108}, {105,131}, {44,32}, {109,101}, {99,116}, {98,128}, {97,140}, {177,149}, {109,97}, {101,100},
  {99,130}, {37,131}, {118,133}, {112,143}, {178,156}, {110,32}, {197,32}, {105,187}, {210,215}, {99,111}, {101,131}, {130,32}, {99,108}, {118,128}, {152,189}, {102,105},
  {111,112}, {97,131}, {188,129}, {168,174}, {100,105}, {97,115}, {108,128}, {112,128}, {136,10}, {156,10}, {109,153}, {151,153}, {116,97}, {168,231}, {119,105}, {216,128},
  {224,137}, {101,10}, {212,157}, {34,32}, {196,221}, {40,242}, {150,122}, {208,151}, {139,32}, {141,32}, {110,97}, {101,108}, {139,132}, {102,145}, {134,32}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method or property %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style type declarations\n",
/*121*/  "cannot specify array dimensions on both type and name\n",
/*122*/  "expected type expression\n",
/*123*/  "fully-qualified name \"%s\" is too long, would be truncated to \"%s\"\n",
/*124*/  "unexpected token, expected method or property\n",
/*125*/  "expected \"native\" or \"get\"\n",
/*126*/  "%s for %s already exists\n",
/*127*/  "property getters cannot accept extra arguments\n",
/*128*/  "%s must have the same return type as property %s (%s)\n",
/*129*/  "cannot mix methodmaps and classes with inheritance\n",
/*130*/  "cannot coerce functions to values\n",
/*131*/  "cannot coerce object type %s to non-object type %s\n",
/*132*/  "cannot coerce non-object type %s to object type %s\n",
/*133*/  "cannot coerce unrelated object types %s and %s\n",
/*134*/  "type mismatch (%s and %s)\n",
/*135*/  "cannot use an object in a multi-tag selector\n",
/*136*/  "arrays are not supported as return types\n",
/*137*/  "cannot mix reference and array types\n",
/*138*/  "const was specified twice\n",
/*139*/  "could not find type \"%s\"\n",
/*140*/  "new-style array types cannot specify dimension sizes as part of their type\n",
/*141*/  "natives, forwards, and public functions cannot return arrays\n",
/*142*/  "invalid type declaration\n",
/*143*/  "new-style declarations should not have \"new\"\n",
/*144*/  "void cannot be used as a variable type\n",
/*145*/  "invalid type expression\n",
/*146*/  "#pragma newdecls must be required or optional\n",
/*147*/  "new-style declarations are required\n",
/*148*/  "cannot assign null to a non-nullable type\n",
/*149*/  "cannot use non-public functions as callbacks\n",
/*150*/  "cannot assign INVALID_FUNCTION to a non-function type\n",
#else
  "\251\256\312\232\266k\216:\234\310bu\201fo\220\204\223\012",
  "\202l\225\247s\206g\346\353e\233\201(\245\251\323\264\202) \252 f\254low ea\277 \042c\345e\042\012",
  "\230\334\205\314 \326\247loc\371\357\303ap\256\205 \376\247\331mpo\220\204\243ock\012",
  "\246\234 \307\224imple\233t\317\012",
  "\301\316\225\224\364\274t\263",
  "\303\313a\264gn\232\266 \370\261y\012",
  "\360\231\245\255\313\217\336\317\012",
  "\303\313\247\367\213\201\251\323\264\202; \345sum\232z\211o\012",
  "\302\315\366\200(nega\207ve\310z\211o \245ou\201\326bo\220ds\235",
  "\302\301\245\230\334\205\314\012",
  "\302out\226d\200\246\263",
  "\302\301c\215l\310\224\247\276add\217s\263",
  "\212 \216tr\225po\206\201(\212 pu\243ic \246s\235",
  "\302\353e\233t; \224\376s\356t\277\012",
  "\042\230fa\306t\363c\345\200\303\313\237\200l\345\201c\345\200\376s\356t\277 \353e\233t\012",
  "m\306\207p\346\230fa\306t\203\376\042s\356t\277\042\012",
  "\220\336\232\324\012",
  "\206i\207\215iz\314 d\231\247\251ce\317\203\230\334\205\232\366\361",
  "\224\247lab\373:\351",
  "\302\262 \372m\200\223\012",
  "\262 \215\217ad\225\336\317:\351",
  "\303\313l\253u\200(n\202-\367\213t\235",
  "\315a\264gn\233\201\303\313\226mp\346a\264gn\233t\012",
  "\042b\217ak\363\245\042\320t\206ue\363\307ou\201\326\320t\251t\012",
  "\301head\206\265\344ff\211\203from pro\266\343\012",
  "\212 \352\277\206\265\042#if...\042\012",
  "\302\277\205a\312\272\367\213t\012",
  "\302subscrip\201(\224\370\315\245\266o m\213\225subscripts):\351",
  "\302\251\323\264\202\310\345sum\232z\211o\012",
  "\331mpo\220\204\353e\233\201\224\334os\232a\201\237\200\216\204\326\337\346(\227\205t\232a\201l\206\200%d\235",
  "\220k\212w\325\344\217c\207v\361",
  "\315\206\230x ou\201\326bo\220d\203(\357\223\235",
  "\315\303\313\206\230x\232(\357\223\235",
  "\342do\332\224\364\247\230fa\306\201\253u\200(\342%d\235",
  "\342\355mis\352\277 (\342%d\235",
  "empt\225\353e\233t\012",
  "\302\227r\206\265(po\264\243\225n\202-t\211m\206\231\232\227r\206g\235",
  "\251t\240 \277\205a\312\211\203\333l\206\361",
  "\367\213\201\262 \304\203\212 \366\361",
  "duplic\231\200\042c\345e\363lab\373 (\253u\200%d\235",
  "\302\373lip\226s\310\315\366\200\307\224k\212wn\012",
  "\302\331\236\206\314 \326\334\345\203s\256ci\337\211\263",
  "\277\205a\312\272\367\213\201\251ce\317\203r\213g\200f\245pack\232\227r\206g\012",
  "po\226\214\371p\205a\311t\211\203\303\323c\317\200\215l \372m\232p\205a\311t\211\263",
  "\266o m\213\225\301\274t\263",
  "\220k\212w\325\315\366\200(\357\223\235",
  "\315\366\332do \224\352\277\310\245\230\227\206\314 \315\307\266o sm\215l\012",
  "\315(\203do \224\352\277\012",
  "\302l\206\200\320t\206u\314\012",
  "\302r\213g\361",
  "\302subscript\310\241\200\042[ ]\363\360\231\221\203\333\316j\245\344\233\226\202\263",
  "m\306\207-\344\233\226\202\371\261y\203\303\313f\306l\225\206i\207\215iz\317\012",
  "\251ce\317\206\265\316ximum nu\236\272\326\344\233\226\202\263",
  "\220\352\277\232\334os\206\265b\240c\200(\042}\042\235",
  "\227\205\201\326\301bod\225\356\237ou\201\301head\211\012",
  "\261ys\310loc\371\330\332\374\301\274t\203\255\313pu\243ic (\357\223\235",
  "\220\275ish\232\251\323\264\333be\375\200\331mpil\272\344\217c\207v\361",
  "duplic\231\200\274t; sam\200\342\307p\345s\232t\356c\361",
  "\301\342\316\225\224\364\247\230fa\306\201\253u\200(\357\223\235",
  "m\306\207p\346\042#\373se\363\344\217c\207v\332betwe\216 \042#if ... #\216\344f\042\012",
  "\042#\373seif\363\344\217c\207\335f\254low\203\370\042#\373se\363\344\217c\207v\361",
  "nu\236\272\326\360\213d\203do\332\224\337\201\237\200\360\231\221\012",
  "\301\217s\306\201\354\265\326\360\231\221\234 \303\313\223\012",
  "\255\277\213g\200\323\336\232\360\231\221\263",
  "\301\342\316\225\202l\225\364\247s\206g\346\354\265(\342%d\235",
  "\301\342\316\225\224\313\247\217f\211\216c\200\342\245\370\315(\342\223\235",
  "\357\255\313bo\237 \247\217f\211\216c\200\374\370\315(\357\223\235",
  "\302\240\214\371nu\236\272\323ci\226\333\376#p\240g\316\012",
  "\240\214\371nu\236\272\375\316\201\215\217ad\225\336\317\012",
  "\240\214\371nu\236\272supp\221\201w\341\224\216\273\317\012",
  "\241\211-\336\232\360\231\245\303\313\230\334\205\232be\375\200\241\200(\246\234\235",
  "\042\366e\305\363\360\231\245\307\302\333\042\246\363\262\263",
  "\301\342\303\313\370\315(\342\223\235",
  "#\336\200p\231t\211\325\303\227\205\201\356\237 \370\215p\304be\207c \277\205a\312\211\012",
  "\206pu\201l\206\200\266o l\202\265(aft\272subs\207tu\214s\235",
  "\257n\354x \211r\245\376\237\200\251\323\264\202\310\245\302\301c\215l\012",
  "m\215\375m\232UTF-8 \216\331d\206g\310\245c\221rupt\232\337le: \350",
  "\301\241\332bo\237 \042\217turn\363\374\042\217tur\325<\253ue>\042\012",
  "\206\320\226\227\216\201\217tur\325\343\203(\315& n\202-\261y\235",
  "\220k\212w\325\262\310\245\224\247\367\213\201\262 \365",
  "\255\354k\200\247\354\265\341\247\230fa\306\201\253u\200f\245\370\206\230x\232\315p\205a\311t\272\365",
  "\241\211-\336\232\360\231\221\203\374\372\207\335\246\203\316\225\224\364\353e\263",
  "\247\301\245\357\316\225\202l\225b\373\202\265\266 \247s\206g\346au\266\352\333\365",
  "\353\200\320fli\312: \202\200\326\237\200\353\332\307\215\217ad\225a\264gn\232\266 a\212\237\272imple\233t\314 \365",
  "\212 \353\332\205\200\336\232f\245\324\012",
  "\220k\212w\325au\266\352\202\351",
  "\220k\212w\325\353\200\223 f\245au\266\352\202\351",
  "pu\243ic \330\332\374loc\371\330\332\316\225\224\364\353\332\365",
  "\353\200\330\332\316\225\224\313\206i\207\215iz\232\365",
  "pu\243ic \246\203\316\225\224\217tur\325\261y\203\365",
  "a\236i\270ou\203\367\213t; \354\265ov\211rid\200\307\217qui\217\204\365",
  "nu\236\272\326\274t\203do\332\224\352\277 \336i\214\012",
  "\251\256\312\232\354\265\372m\200id\216\207\337\211\012",
  "\301\216um\211\314 \217qui\217\203\220iqu\200\354g\012",
  "\255\364\217qui\217\204p\205a\311t\211\203aft\272\340\214\371p\205a\311t\211\263",
  "\331\306\204\224\275\204\311\236\211\234 \376\227ruc\201\223\012",
  "\324 do\332\224\364\247\352\277\206\265\343\012",
  "\355\223 sho\306\204\313\223 \376new-\227y\346\230\334\205\314\263",
  "\321sho\306\204\224\364\370\251plici\201\217tur\325\343\012",
  "\301pro\266\343\203do \224\352\277\012",
  "s\256cif\225ei\237\272\215l \344\233\226\202\203\245\202l\225\237\200l\345\201\344\233\226\202\012",
  "\255\275\204\321\350",
  "\321w\341\215\217ad\225\336\232\333\237\307\350",
  "\255\275\204\213\225\311\237od\203f\245\350",
  "\255\275\204\311\237o\204\245pr\360t\225\210.\350",
  "\255c\215l \311\237od\203\333\370\261y\012",
  "\255c\215l \311\237od\203\333\247\246\012",
  "\311\237o\204\303\364\247\337rs\201\342\331mpa\207\243\200\356\237 \237\200\321\355(\210\235",
  "\321\372m\200\303\227\205\201\356\237 \370upp\211c\345\200lett\211\012",
  "\321\304\203\215\217ad\225be\216 \336\232(\323vio\241l\225se\216 \341\210\235",
  "\251\256\312\232id\216\207\337\272- d\267you \375ge\201\247\343?\012",
  "\367ru\312\245\301\303\217tur\325\354\265\350",
  "\255\336\200\367ru\312\245\375\234; \215\217ad\225\251i\227\203\341\247\350",
  "miss\206\265\343\310\245\321\303\364\237\200sam\200\372m\200\341\321\223\012",
  "\255\241\200\230lete\310\321\321\304\203\212 \230\227ru\312\221\012",
  "\212 \311\237od\316p \245\334\345\203w\341fo\220\204f\245\350",
  "\212 \230\227ru\312\245w\341fo\220\204f\245\321\350",
  "\230\227ru\312\221\203\303\313\372\207\335\246\263",
  "\230\227ru\312\221\203\255\364\251t\240 \274t\263",
  "\311\237od\316p \374\334\345\203\226gn\231u\217\203\303\241\200new-\227y\346\355\230\334\205\314\263",
  "\255s\256cif\225\315\344\233\226\202\203\333bo\237 \355\374\372\311\012",
  "\251\256\312\232\355\251\323\264\202\012",
  "f\306ly-qu\215i\337\232\372m\200\223 \307\266o l\202g\310wo\306\204\313tr\242\231\232\266\351",
  "\220\251\256\312\232\266k\216\310\251\256\312\232\311\237o\204\245pr\360\250\012",
  "\251\256\312\232\042\372\207ve\363\245\042get\042\012",
  "\321f\245\321\215\217ad\225\251i\227\263",
  "pr\360t\225gett\211\203\255accep\201\251t\240 \274t\263",
  "\321\303\364\237\200sam\200\217tur\325\355\341pr\360t\225\321(\210\235",
  "\255mix \311\237od\316p\203\374\334\345s\332\356\237 \206h\211it\213c\361",
  "\255\331\211c\200\246\203\266 \253ue\263",
  "\255\331\211c\200objec\201\355\321\266 n\202-objec\201\355\350",
  "\255\331\211c\200n\202-objec\201\355\321\266 objec\201\355\350",
  "\255\331\211c\200\220\217l\231\232objec\201\343\203\321\374\350",
  "\355mis\352\277 (\321\374\210\235",
  "\255\241\200\370objec\201\376\247m\306\207-\354\265s\373e\312\221\012",
  "\261y\203\205\200\224supp\221t\232\341\217tur\325\343\263",
  "\255mix \217f\211\216c\200\374\315\343\263",
  "\320s\201w\341s\256ci\337\232t\356c\361",
  "\331\306\204\224\275\204\355\223\012",
  "new-\227y\346\315\343\203\255s\256cif\225\344\233\226\333\366\332\341p\205\201\326\237eir \343\012",
  "\372\207ves\310\375w\205ds\310\374pu\243ic \246\203\255\217tur\325\261y\263",
  "\302\355\230\334\205\314\012",
  "new-\227y\346\230\334\205\314\203sho\306\204\224\364\042new\042\012",
  "vo\267\255\313\241\232\341\247\357\343\012",
  "\302\355\251\323\264\202\012",
  "#p\240gm\247new\230\334\203\303\313\217qui\217\204\245\340\214\215\012",
  "new-\227y\346\230\334\205\314\203\205\200\217qui\217d\012",
  "\255a\264g\325n\306l \266 \247n\202-n\306l\273\200\343\012",
  "\255\241\200n\202-pu\243ic \246\203\341c\215lback\263",
  "\255a\264g\325INVALID_FUNCTION \266 \247n\202-\301\343\012"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\255\217a\204from \337le:\351",
  "\255writ\200\266 \337le:\351",
  "t\273\200ov\211flow:\351",
  "\206suf\337ci\216\201\311m\221y\012",
  "\302\345se\236l\272\206\227ruc\214\351",
  "num\211ic ov\211flow\310\251ce\317\206\265capaci\250\012",
  "\331mpil\232scrip\201\251ce\317\203\237\200\316ximum \311m\221\225\366\200(%l\204bytes\235",
  "\266o m\213\225\211r\245\311ssag\332\333\202\200l\206\361",
  "\331\230pag\200\316pp\206\265\337\346\224fo\220d\012",
  "\302p\231h:\351",
  "\345s\211\214 fail\317: \350",
  "\241\272\211r\221: \350"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\324 \307tr\242\231\232\266 %\204\277\205a\312\211\263",
  "\217\336i\214 \326\367\213t/\316cro \365",
  "nu\236\272\326\274t\203do\332\224\352\277 \336i\214\012",
  "\262 \307nev\272\241\317:\351",
  "\262 \307a\264gn\232\247\253u\200\237a\201\307nev\272\241\317:\351",
  "\217d\220d\213\201\331\230: \367\213\201\251\323\264\333\307z\211o\012",
  "\217d\220d\213\201te\227: \367\213\201\251\323\264\333\307n\202-z\211o\012",
  "\220k\212w\325#p\240g\316\012",
  "\301\356\237 \354\265\217s\306\201\241\232be\375\200\336i\214\310\375c\206\265\217p\205s\361",
  "\246\234 sho\306\204\217tur\325\247\253u\361",
  "po\264\243\200\241\200\326\262 be\375\200\206i\207\215iz\314:\351",
  "po\264\243\225\220\206t\216\230\204a\264gn\233t\012",
  "po\264\243\225\220\206t\216\230\204bit\356s\200\360\314\012",
  "\354\265mis\352\277\012",
  "po\264\243\225\247\042\367\363\315\342w\341\206t\216\230d:\351",
  "\251\323\264\333\304\203\212 effe\312\012",
  "ne\227\232\331m\233t\012",
  "loos\200\206d\216t\314\012",
  "\254\204\227y\346pro\266\343\203\241\232\356\237 \340\214\371semic\254umn\263",
  "loc\371\357\223 s\304dow\203\247\357a\201\247\323c\317\206\265lev\373\012",
  "\251\323\264\333\356\237 \354\265ov\211rid\200\303ap\256\205 betwe\216 p\205\216\237ese\263",
  "lab\373 \372m\200\223 s\304dow\203\354\265\372\311\012",
  "nu\236\272\326\344git\203\251ce\317\203\240\214\371nu\236\272\323ci\226\202\012",
  "\217d\220d\213\201\042\366e\305\042: \342\366\200\307\215way\2031 \365",
  "\206\230t\211m\206\231\200\315\366\200\376\042\366e\305\363\251\323\264\333\365",
  "\220\217a\277\273\200\331\230\012",
  "\247\357\307a\264gn\232\266 its\373f \365",
  "m\221\200\206i\207\215iz\211\203\237\370\216um \337\373d\263",
  "l\216g\237 \326\206i\207\215iz\272\251ce\317\203\366\200\326\237\200\216um \337\373d\012",
  "\206\230x \354\265mis\352\277 \365",
  "\212 imple\233t\314 f\245\353\200\223 \376\246\234\310\212 f\215l-back\012",
  "\353\200s\256ci\337c\314 \333\375w\205\204\230\334\205\314 \307ig\212\217d\012",
  "outpu\201\337\346\307writt\216\310bu\201\356\237 \331mpac\201\216\331d\206\265\344s\273\317\012",
  "\353\200\357\223 s\304dow\203\247glob\371\330\361",
  "\324 \307m\205k\232\341\230\323c\231\317: \350",
  "pu\243ic \301lack\203\375w\205\204\230\334\205\314 \365",
  "\220k\212w\325p\205a\311t\272\376subs\207tu\214 (\206c\221\217c\201#\336\200p\231t\211n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
