/*  Pawn compiler - Error message strings (plain and compressed formats)
 *
 *  Copyright (c) ITB CompuPhase, 2000-2006
 *
 *  This software is provided "as-is", without any express or implied warranty.
 *  In no event will the authors be held liable for any damages arising from
 *  the use of this software.
 *
 *  Permission is granted to anyone to use this software for any purpose,
 *  including commercial applications, and to alter it and redistribute it
 *  freely, subject to the following restrictions:
 *
 *  1.  The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software in
 *      a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 *  2.  Altered source versions must be plainly marked as such, and must not be
 *      misrepresented as being the original software.
 *  3.  This notice may not be removed or altered from any source distribution.
 *
 *  Version: $Id$
 */

SC_FUNC int strexpand(char *dest, unsigned char *source, int maxlen, unsigned char pairtable[128][2]);

#ifndef SCPACK
# define SCPACK
# define SCPACK_PUSH
#endif

#define SCPACK_TABLE errstr_table
/*-*SCPACK start of pair table, do not change or remove this line */
unsigned char errstr_table[][2] = {
  {101,32}, {116,32}, {111,110}, {115,32}, {105,110}, {100,32}, {97,114}, {116,105}, {37,115}, {101,114}, {110,111}, {101,110}, {97,108}, {97,110}, {135,130}, {34,136},
  {143,34}, {111,114}, {114,101}, {117,110}, {121,32}, {138,129}, {97,116}, {115,116}, {115,105}, {100,101}, {101,133}, {32,144}, {117,109}, {41,10}, {116,104}, {117,115},
  {145,32}, {147,99}, {98,108}, {142,32}, {102,161}, {97,32}, {98,111}, {101,120}, {118,140}, {114,97}, {115,121}, {109,166}, {170,171}, {172,108}, {103,32}, {156,139},
  {99,141}, {137,32}, {103,175}, {134,178}, {116,111}, {105,131}, {115,10}, {176,149}, {115,152}, {134,169}, {99,104}, {105,133}, {102,132}, {97,162}, {116,121}, {101,131},
  {159,129}, {164,163}, {168,187}, {109,192}, {104,97}, {101,100}, {111,102}, {99,116}, {132,194}, {109,97}, {109,101}, {190,112}, {37,131}, {173,155}, {44,32}, {116,97},
  {99,111}, {167,112}, {98,128}, {99,130}, {118,134}, {198,32}, {105,189}, {212,214}, {117,108}, {109,139}, {185,148}, {153,188}, {134,97}, {118,128}, {179,129}, {101,10},
  {130,32}, {102,105}, {111,112}, {97,115}, {136,10}, {155,10}, {151,150}, {109,150}, {110,32}, {226,137}, {128,144}, {205,157}, {34,32}, {100,105}, {119,105}, {40,235},
  {99,108}, {211,151}, {140,32}, {141,32}, {196,221}, {101,108}, {152,122}, {108,128}, {164,142}, {132,32}, {132,174}, {207,174}, {231,186}, {158,128}, {97,131}
};
/*-*SCPACK end of pair table, do not change or remove this line */

static char *errmsg[] = {
#ifdef SCPACK
/*001*/  "expected token: \"%s\", but found \"%s\"\n",
/*002*/  "only a single statement (or expression) can follow each \"case\"\n",
/*003*/  "declaration of a local variable must appear in a compound block\n",
/*004*/  "function \"%s\" is not implemented\n",
/*005*/  "function may not have arguments\n",
/*006*/  "must be assigned to an array\n",
/*007*/  "operator cannot be redefined\n",
/*008*/  "must be a constant expression; assumed zero\n",
/*009*/  "invalid array size (negative, zero or out of bounds)\n",
/*010*/  "invalid function or declaration\n",
/*011*/  "invalid outside functions\n",
/*012*/  "invalid function call, not a valid address\n",
/*013*/  "no entry point (no public functions)\n",
/*014*/  "invalid statement; not in switch\n",
/*015*/  "\"default\" case must be the last case in switch statement\n",
/*016*/  "multiple defaults in \"switch\"\n",
/*017*/  "undefined symbol \"%s\"\n",
/*018*/  "initialization data exceeds declared size\n",
/*019*/  "not a label: \"%s\"\n",
/*020*/  "invalid symbol name \"%s\"\n",
/*021*/  "symbol already defined: \"%s\"\n",
/*022*/  "must be lvalue (non-constant)\n",
/*023*/  "array assignment must be simple assignment\n",
/*024*/  "\"break\" or \"continue\" is out of context\n",
/*025*/  "function heading differs from prototype\n",
/*026*/  "no matching \"#if...\"\n",
/*027*/  "invalid character constant\n",
/*028*/  "invalid subscript (not an array or too many subscripts): \"%s\"\n",
/*029*/  "invalid expression, assumed zero\n",
/*030*/  "compound statement not closed at the end of file (started at line %d)\n",
/*031*/  "unknown directive\n",
/*032*/  "array index out of bounds (variable \"%s\")\n",
/*033*/  "array must be indexed (variable \"%s\")\n",
/*034*/  "argument does not have a default value (argument %d)\n",
/*035*/  "argument type mismatch (argument %d)\n",
/*036*/  "empty statement\n",
/*037*/  "invalid string (possibly non-terminated string)\n",
/*038*/  "extra characters on line\n",
/*039*/  "constant symbol has no size\n",
/*040*/  "duplicate \"case\" label (value %d)\n",
/*041*/  "invalid ellipsis, array size is not known\n",
/*042*/  "invalid combination of class specifiers\n",
/*043*/  "character constant exceeds range for packed string\n",
/*044*/  "positional parameters must precede all named parameters\n",
/*045*/  "too many function arguments\n",
/*046*/  "unknown array size (variable \"%s\")\n",
/*047*/  "array sizes do not match, or destination array is too small\n",
/*048*/  "array (s do not match\n",
/*049*/  "invalid line continuation\n",
/*050*/  "invalid range\n",
/*051*/  "invalid subscript, use \"[ ]\" operators on major dimensions\n",
/*052*/  "multi-dimensional arrays must be fully initialized\n",
/*053*/  "exceeding maximum number of dimensions\n",
/*054*/  "unmatched closing brace (\"}\")\n",
/*055*/  "start of function body without function header\n",
/*056*/  "arrays, local variables and function arguments cannot be public (variable \"%s\")\n",
/*057*/  "unfinished expression before compiler directive\n",
/*058*/  "duplicate argument; same argument is passed twice\n",
/*059*/  "function argument may not have a default value (variable \"%s\")\n",
/*060*/  "multiple \"#else\" directives between \"#if ... #endif\"\n",
/*061*/  "\"#elseif\" directive follows an \"#else\" directive\n",
/*062*/  "number of operands does not fit the operator\n",
/*063*/  "function result tag of operator \"%s\" must be \"%s\"\n",
/*064*/  "cannot change predefined operators\n",
/*065*/  "function argument may only have a single tag (argument %d)\n",
/*066*/  "function argument may not be a reference argument or an array (argument \"%s\")\n",
/*067*/  "variable cannot be both a reference and an array (variable \"%s\")\n",
/*068*/  "invalid rational number precision in #pragma\n",
/*069*/  "rational number format already defined\n",
/*070*/  "rational number support was not enabled\n",
/*071*/  "user-defined operator must be declared before use (function \"%s\")\n",
/*072*/  "\"sizeof\" operator is invalid on \"function\" symbols\n",
/*073*/  "function argument must be an array (argument \"%s\")\n",
/*074*/  "#define pattern must start with an alphabetic character\n",
/*075*/  "input line too long (after substitutions)\n",
/*076*/  "syntax error in the expression, or invalid function call\n",
/*077*/  "malformed UTF-8 encoding, or corrupted file: %s\n",
/*078*/  "function uses both \"return\" and \"return <value>\"\n",
/*079*/  "inconsistent return types (array & non-array)\n",
/*080*/  "unknown symbol, or not a constant symbol (symbol \"%s\")\n",
/*081*/  "cannot take a tag as a default value for an indexed array parameter (symbol \"%s\")\n",
/*082*/  "user-defined operators and native functions may not have states\n",
/*083*/  "a function or variable may only belong to a single automaton (symbol \"%s\")\n",
/*084*/  "state conflict: one of the states is already assigned to another implementation (symbol \"%s\")\n",
/*085*/  "no states are defined for symbol \"%s\"\n",
/*086*/  "unknown automaton \"%s\"\n",
/*087*/  "unknown state \"%s\" for automaton \"%s\"\n",
/*088*/  "public variables and local variables may not have states (symbol \"%s\")\n",
/*089*/  "state variables may not be initialized (symbol \"%s\")\n",
/*090*/  "public functions may not return arrays (symbol \"%s\")\n",
/*091*/  "ambiguous constant; tag override is required (symbol \"%s\")\n",
/*092*/  "number of arguments does not match definition\n",
/*093*/  "expected tag name identifier\n",
/*094*/  "function enumeration requires unique tag\n",
/*095*/  "cannot have required parameters after optional parameters\n",
/*096*/  "could not find member \"%s\" in struct \"%s\"\n",
/*097*/  "symbol \"%s\" does not have a matching type\n",
/*098*/  "type \"%s\" should be \"%s\" in new-style declarations\n",
/*099*/  "%s should not have an explicit return type\n",
/*100*/  "function prototypes do not match\n",
/*101*/  "specify either all dimensions or only the last dimension\n",
/*102*/  "cannot find %s %s\n",
/*103*/  "%s was already defined on this %s\n",
/*104*/  "cannot find any methods for %s\n",
/*105*/  "cannot find method or property %s.%s\n",
/*106*/  "cannot call methods on an array\n",
/*107*/  "cannot call methods on a function\n",
/*108*/  "method must have a first argument compatible with the %s type (%s)\n",
/*109*/  "%s name must start with an uppercase letter\n",
/*110*/  "%s has already been defined (previously seen as %s)\n",
/*111*/  "expected identifier - did you forget a type?\n",
/*112*/  "constructor function must return tag %s\n",
/*113*/  "cannot define constructor for \"%s\"; already exists as a %s\n",
/*114*/  "missing type, or %s must have the same name as %s \"%s\"\n",
/*115*/  "cannot use delete, %s %s has no destructor\n",
/*116*/  "no methodmap or class was found for %s\n",
/*117*/  "no destructor was found for %s %s\n",
/*118*/  "destructors must be native functions\n",
/*119*/  "destructors cannot have extra arguments\n",
/*120*/  "methodmap and class signatures must use new-style type declarations\n",
/*121*/  "cannot specify array dimensions on both type and name\n",
/*122*/  "expected type expression\n",
/*123*/  "fully-qualified name \"%s\" is too long, would be truncated to \"%s\"\n",
/*124*/  "unexpected token, expected method or property\n",
/*125*/  "expected \"native\" or \"get\"\n",
/*126*/  "%s for %s already exists\n",
/*127*/  "property getters cannot accept extra arguments\n",
/*128*/  "%s must have the same return type as property %s (%s)\n",
/*129*/  "cannot mix methodmaps and classes with inheritance\n",
/*130*/  "cannot coerce functions to values\n",
/*131*/  "cannot coerce object type %s to non-object type %s\n",
/*132*/  "cannot coerce non-object type %s to object type %s\n",
/*133*/  "cannot coerce unrelated object types %s and %s\n",
/*134*/  "type mismatch (%s and %s)\n",
/*135*/  "cannot use an object in a multi-tag selector\n",
/*136*/  "arrays are not supported as return types\n",
/*137*/  "cannot mix reference and array types\n",
/*138*/  "const was specified twice\n",
#else
  "\321e\307\232\264k\213:\233\316bu\201fo\223\205\220\012",
  "\202l\224\245s\204g\367\346e\331\201(\240\321\222\270\202) \260 follow ea\272 \042c\343e\042\012",
  "\231\360\334\243\325\245loc\362\327\200\303appe\206 \371\245\320mpo\223\205\242ock\012",
  "\370\233 \265\225imple\331t\305\012",
  "\301\311\224\225\364\263t\266",
  "\303\322a\270gn\232\264 \363\271y\012",
  "\351\226\240\267\322\222\333\305\012",
  "\303\322\245\361\215\201\321\222\270\202; \343s\234\232z\211o\012",
  "\310\332\366\200(nega\207ve\316z\211o \240ou\201\325\246\223ds\235",
  "\310\301\240\231\360\334\216\012",
  "\310out\230d\200\370\266",
  "\310\301c\214l\316\225\245\302add\222s\266",
  "\212 \213tr\224po\204\201(\212 pu\242ic \370s\235",
  "\310\346e\331t; \225\371s\356t\272\012",
  "\042\231fa\330t\354c\343\200\303\322\375l\343\201c\343\200\371s\356t\272 \346e\331t\012",
  "m\330\207p\367\231fa\330t\203\371\042s\356t\272\042\012",
  "\223\333\232\315\012",
  "\204i\207\214iza\243d\226\245\247ce\305\203\231\360\206\232\366\337",
  "\225\245lab\365:\345",
  "\310\255 nam\352\012",
  "\255 \214\222ad\224\333\305:\345",
  "\303\322l\250u\200(n\202-\361\215t\235",
  "\332a\270gn\331\201\303\322\230mp\367a\270gn\331t\012",
  "\042b\222ak\354\240\042\323t\204ue\354\265ou\201\325\323t\247t\012",
  "\301head\372\355ff\211\203from pro\264\313\337",
  "\212 \374\372\042#if...\042\012",
  "\310\272\334\307\261\361\215t\012",
  "\310subscrip\201(\225\363\332\240\264o m\215\224subscripts):\345",
  "\310\321\222\270\202\316\343s\234\232z\211o\012",
  "\320mpo\223\205\346e\331\201\225\360os\232a\201\375\213\205\325\341\367(\227\206t\232a\201l\204\200%d\235",
  "\223k\212w\350\355\222c\207v\337",
  "\332\204\231x ou\201\325\246\223d\203(\327\352\235",
  "\332\303\322\204\231x\232(\327\352\235",
  "\336do\277\225\364\245\231fa\330\201\250u\200(\336%d\235",
  "\336\313\200mis\374 (\336%d\235",
  "empt\224\346e\331t\012",
  "\310\227r\372(po\270\242\224n\202-t\211m\204\226\232\227r\204g\235",
  "\247tr\245\272\334\307\211\203\340l\204\337",
  "\361\215\201\255 \304\203\212 \366\337",
  "duplic\226\200\042c\343e\354lab\365 (\250u\200%d\235",
  "\310\365lip\230s\316\332\366\200\265\225k\212wn\012",
  "\310\320mb\204a\243\325\360\343\203speci\341\211\266",
  "\272\334\307\261\361\215\201\247ce\305\203r\215g\200f\240pack\232\227r\204g\012",
  "po\230\216\362p\334\312t\211\203\303p\222c\305\200\214l nam\232p\334\312t\211\266",
  "\264o m\215\224\301\263t\266",
  "\223k\212w\350\332\366\200(\327\352\235",
  "\332\366\277do \225\374\316\240\231\227\204a\243\332\265\264o sm\214l\012",
  "\332(\203do \225\374\012",
  "\310l\204\200\323t\204ua\216\012",
  "\310r\215g\337",
  "\310subscript\316\237\200\042[ ]\354\351\226\221\203\340\311j\240\355\331\230\202\266",
  "m\330\207-\355\331\230\202\362\271y\203\303\322f\330l\224\204i\207\214iz\305\012",
  "\247ce\305\372\311xim\234 n\234b\261\325\355\331\230\202\266",
  "\223\374\232\360os\372b\251c\200(\042}\042\235",
  "\227\206\201\325\301\246d\224\356\236ou\201\301head\211\012",
  "\271ys\316loc\362\327\277\215\205\301\263t\203\267\322pu\242ic (\327\352\235",
  "\223\274ish\232\321\222\270\340bef\221\200\320mpil\261\355\222c\207v\337",
  "duplic\226\200\263t; sam\200\336\265p\343s\232t\356c\337",
  "\301\336\311\224\225\364\245\231fa\330\201\250u\200(\327\352\235",
  "m\330\207p\367\042#\365se\354\355\222c\207v\277betwe\213 \042#if ... #\213\355f\042\012",
  "\042#\365seif\354\355\222c\207\335follow\203\363\042#\365se\354\355\222c\207v\337",
  "n\234b\261\325\351\215d\203do\277\225\341\201\375\351\226\221\012",
  "\301\222s\330\201\373\325\351\226\221\233 \303\322\220\012",
  "\267\272\215g\200p\222\333\232\351\226\221\266",
  "\301\336\311\224\202l\224\364\245s\204g\367\373(\336%d\235",
  "\301\336\311\224\225\322\245\222f\211\213c\200\336\240\363\332(\336\220\235",
  "\327\200\267\322\246\236 \245\222f\211\213c\200\215\205\363\332(\327\352\235",
  "\310\251\216\362n\234b\261p\222ci\230\340\371#p\251g\311\012",
  "\251\216\362n\234b\261f\221\311\201\214\222ad\224\333\305\012",
  "\251\216\362n\234b\261supp\221\201w\376\225\213\275\305\012",
  "\237\211-\333\232\351\226\240\303\322\231\360\206\232bef\221\200\237\200(\370\233\235",
  "\042\366e\306\354\351\226\240\265\310\340\042\370\354\255\266",
  "\301\336\303\322\363\332(\336\220\235",
  "#\333\200p\226t\211\350\303\227\206\201\356\236 \363\214p\304be\207c \272\334\307\211\012",
  "\204pu\201l\204\200\264o l\202\256(aft\261subs\207tu\216s\235",
  "\252n\317x \211r\240\371\375\321\222\270\202\316\240\310\301c\214l\012",
  "m\214f\221m\232UTF-8 \213\320d\204g\316\240c\221rupt\232\341le: \344",
  "\301\237\277\246\236 \042\222turn\354\215\205\042\222tur\350<\250ue>\042\012",
  "\204\323\230\227\213\201\222tur\350\313\277(\332& n\202-\271y\235",
  "\223k\212w\350\255\316\240\225\245\361\215\201\255 \357",
  "\267\317k\200\245\373\376\245\231fa\330\201\250u\200f\240\363\204\231x\232\332p\334\312t\261\357",
  "\237\211-\333\232\351\226\221\203\215\205na\207\335\370\203\311\224\225\364\346e\266",
  "\245\301\240\327\200\311\224\202l\224b\365\202\256\264 \245s\204g\367au\264\347\340\357",
  "\346\200\323fli\307: \202\200\325\375\346\277\265\214\222ad\224a\270gn\232\264 a\212\236\261imple\331\317\243\357",
  "\212 \346\277\206\200\333\232f\240\315\012",
  "\223k\212w\350au\264\347\202\345",
  "\223k\212w\350\346\352 f\240au\264\347\202\345",
  "pu\242ic \327\277\215\205loc\362\327\277\311\224\225\364\346\277\357",
  "\346\200\327\277\311\224\225\322\204i\207\214iz\232\357",
  "pu\242ic \370\203\311\224\225\222tur\350\271y\203\357",
  "ambiguou\203\361\215t; \373ov\211rid\200\265\222qui\222\205\357",
  "n\234b\261\325\263t\203do\277\225\374 \333i\216\012",
  "\321e\307\232\373nam\200id\213\207\341\211\012",
  "\301\213\234\211a\243\222qui\222\203\223iqu\200\317g\012",
  "\267\364\222qui\222\205p\334\312t\211\203aft\261\342\216\362p\334\312t\211\266",
  "\320\330\205\225\274\205\312mb\211\233 \371\227ruc\201\220\012",
  "\315 do\277\225\364\245\374\372\313\337",
  "\313\352 sho\330\205\322\220 \371new-\227y\367\231\360\334\216\266",
  "\314sho\330\205\225\364\363\321lici\201\222tur\350\313\337",
  "\301pro\264\313\277do \225\374\012",
  "specif\224ei\236\261\214l \355\331\230\202\203\240\202l\224\375l\343\201\355\331\230\202\012",
  "\267\274\205\314\344",
  "\314w\376\214\222ad\224\333\232\340\236\265\344",
  "\267\274\205\215\224\312\236od\203f\240\344",
  "\267\274\205\312\236o\205\240pr\351t\224\210.\344",
  "\267c\214l \312\236od\203\340\363\271y\012",
  "\267c\214l \312\236od\203\340\245\370\012",
  "\312\236o\205\303\364\245\341rs\201\336\320mpa\207\242\200\356\236 \375\314\313\200(\210\235",
  "\314nam\200\303\227\206\201\356\236 \363upp\211c\343\200lett\211\012",
  "\314\304\203\214\222ad\224be\213 \333\232(p\222vio\237l\224se\213 \376\210\235",
  "\321e\307\232id\213\207\341\261- d\273you f\221ge\201\245\313e?\012",
  "\361ru\307\240\301\303\222tur\350\373\344",
  "\267\333\200\361ru\307\240f\221\233; \214\222ad\224\247i\227\203\376\245\344",
  "miss\372\313e\316\240\314\303\364\375sam\200nam\200\376\314\220\012",
  "\267\237\200\231lete\316\314\314\304\203\212 \231\227ru\307\221\012",
  "\212 \312\236od\311p \240\360\343\203w\376fo\223\205f\240\344",
  "\212 \231\227ru\307\240w\376fo\223\205f\240\314\344",
  "\231\227ru\307\221\203\303\322na\207\335\370\266",
  "\231\227ru\307\221\203\267\364\247tr\245\263t\266",
  "\312\236od\311p \215\205\360\343\203\230gn\226u\222\203\303\237\200new-\227y\367\313\200\231\360\334\216\266",
  "\236\265\252n\317x \265\225ye\201supp\221t\305\012",
  "\321e\307\232\313\200\321\222\270\202\012",
  "f\330ly-qu\214i\341\232nam\352 \265\264o l\202g\316wo\330\205\322tr\241\226\232\264\345",
  "\223\321e\307\232\264k\213\316\321e\307\232\312\236o\205\240pr\351\276\012",
  "\321e\307\232\042na\207ve\354\240\042get\042\012",
  "\314f\240\314\214\222ad\224\247i\227\266",
  "pr\351t\224gett\211\203\267accep\201\247tr\245\263t\266",
  "\314\303\364\375sam\200\222tur\350\313\200\376pr\351t\224\314(\210\235",
  "\267mix \312\236od\311p\203\215\205\360\343s\277\356\236 \204h\211it\215c\337",
  "\267\320\211c\200\370\203\264 \250ue\266",
  "\267\320\211c\200objec\201\313\200\314\264 n\202-objec\201\313\200\344",
  "\267\320\211c\200n\202-objec\201\313\200\314\264 objec\201\313\200\344",
  "\267\320\211c\200\223\222l\226\232objec\201\313\277\314\215\205\344",
  "\313\200mis\374 (\314\215\205\210\235",
  "\267\237\200\363objec\201\371\245m\330\207-\373s\365e\307\221\012"
#endif
       };

static char *fatalmsg[] = {
#ifdef SCPACK
/*160*/  "cannot read from file: \"%s\"\n",
/*161*/  "cannot write to file: \"%s\"\n",
/*162*/  "table overflow: \"%s\"\n",
          /* table can be: loop table
           *               literal table
           *               staging buffer
           *               option table (response file)
           *               peephole optimizer table
           */
/*163*/  "insufficient memory\n",
/*164*/  "invalid assembler instruction \"%s\"\n",
/*165*/  "numeric overflow, exceeding capacity\n",
/*166*/  "compiled script exceeds the maximum memory size (%ld bytes)\n",
/*167*/  "too many error messages on one line\n",
/*168*/  "codepage mapping file not found\n",
/*169*/  "invalid path: \"%s\"\n",
/*170*/  "assertion failed: %s\n",
/*171*/  "user error: %s\n",
#else
  "\267\222a\205from \341le:\345",
  "\267writ\200\264 \341le:\345",
  "t\275\200ov\211flow:\345",
  "\204suf\341ci\213\201\312m\221y\012",
  "\310\343sem\242\261\204\227ruc\216\345",
  "n\234\211ic ov\211flow\316\247ce\305\372capaci\276\012",
  "\320mpil\232scrip\201\247ce\305\203\375\311xim\234 \312m\221\224\366\200(%l\205bytes\235",
  "\264o m\215\224\211r\240\312ssag\277\340\202\200l\204\337",
  "\320\231pag\200\311pp\372\341\367\225fo\223d\012",
  "\310p\226h:\345",
  "\343s\211\243fail\305: \344",
  "\237\261\211r\221: \344"
#endif
       };

static char *warnmsg[] = {
#ifdef SCPACK
/*200*/  "symbol \"%s\" is truncated to %d characters\n",
/*201*/  "redefinition of constant/macro (symbol \"%s\")\n",
/*202*/  "number of arguments does not match definition\n",
/*203*/  "symbol is never used: \"%s\"\n",
/*204*/  "symbol is assigned a value that is never used: \"%s\"\n",
/*205*/  "redundant code: constant expression is zero\n",
/*206*/  "redundant test: constant expression is non-zero\n",
/*207*/  "unknown #pragma\n",
/*208*/  "function with tag result used before definition, forcing reparse\n",
/*209*/  "function \"%s\" should return a value\n",
/*210*/  "possible use of symbol before initialization: \"%s\"\n",
/*211*/  "possibly unintended assignment\n",
/*212*/  "possibly unintended bitwise operation\n",
/*213*/  "tag mismatch\n",
/*214*/  "possibly a \"const\" array argument was intended: \"%s\"\n",
/*215*/  "expression has no effect\n",
/*216*/  "nested comment\n",
/*217*/  "loose indentation\n",
/*218*/  "old style prototypes used with optional semicolumns\n",
/*219*/  "local variable \"%s\" shadows a variable at a preceding level\n",
/*220*/  "expression with tag override must appear between parentheses\n",
/*221*/  "label name \"%s\" shadows tag name\n",
/*222*/  "number of digits exceeds rational number precision\n",
/*223*/  "redundant \"sizeof\": argument size is always 1 (symbol \"%s\")\n",
/*224*/  "indeterminate array size in \"sizeof\" expression (symbol \"%s\")\n",
/*225*/  "unreachable code\n",
/*226*/  "a variable is assigned to itself (symbol \"%s\")\n",
/*227*/  "more initializers than enum fields\n",
/*228*/  "length of initializer exceeds size of the enum field\n",
/*229*/  "index tag mismatch (symbol \"%s\")\n",
/*230*/  "no implementation for state \"%s\" in function \"%s\", no fall-back\n",
/*231*/  "state specification on forward declaration is ignored\n",
/*232*/  "output file is written, but with compact encoding disabled\n",
/*233*/  "state variable \"%s\" shadows a global variable\n",
/*234*/  "symbol \"%s\" is marked as deprecated: %s\n",
/*235*/  "public function lacks forward declaration (symbol \"%s\")\n",
/*236*/  "unknown parameter in substitution (incorrect #define pattern)\n"
#else
  "\315 \265tr\241\226\232\264 %\205\272\334\307\211\266",
  "\222\333i\243\325\361\215t/\311cro \357",
  "n\234b\261\325\263t\203do\277\225\374 \333i\216\012",
  "\255 \265nev\261\237\305:\345",
  "\255 \265a\270gn\232\245\250u\200\236a\201\265nev\261\237\305:\345",
  "\222d\223d\215\201\320\231: \361\215\201\321\222\270\340\265z\211o\012",
  "\222d\223d\215\201te\227: \361\215\201\321\222\270\340\265n\202-z\211o\012",
  "\223k\212w\350#p\251g\311\012",
  "\301\356\236 \373\222s\330\201\237\232bef\221\200\333i\216\316f\221c\372\222p\206s\337",
  "\370\233 sho\330\205\222tur\350\245\250u\337",
  "po\270\242\200\237\200\325\255 bef\221\200\204i\207\214iza\216:\345",
  "po\270\242\224\223\204t\213\231\205a\270gn\331t\012",
  "po\270\242\224\223\204t\213\231\205bit\356s\200\351a\216\012",
  "\373mis\374\012",
  "po\270\242\224\245\042\361\354\332\336w\376\204t\213\231d:\345",
  "\321\222\270\340\304\203\212 effe\307\012",
  "ne\227\232\320m\331t\012",
  "loos\200\204d\213\317\216\012",
  "ol\205\227y\367pro\264\313\277\237\232\356\236 \342\216\362semi\320l\234n\266",
  "loc\362\327\352 s\304dow\203\245\327\200a\201\245p\222c\305\372lev\365\012",
  "\321\222\270\340\356\236 \373ov\211rid\200\303appe\206 betwe\213 p\206\213\236ese\266",
  "lab\365 nam\352 s\304dow\203\373na\312\012",
  "n\234b\261\325\355git\203\247ce\305\203\251\216\362n\234b\261p\222ci\230\202\012",
  "\222d\223d\215\201\042\366e\306\042: \336\366\200\265\214way\2031 \357",
  "\204\231t\211m\204\226\200\332\366\200\371\042\366e\306\354\321\222\270\340\357",
  "\223\222a\272\275\200\320\231\012",
  "\245\327\200\265a\270gn\232\264 its\365f \357",
  "m\221\200\204i\207\214iz\211\203\236\363\213\234 \341\365d\266",
  "l\213g\236 \325\204i\207\214iz\261\247ce\305\203\366\200\325\375\213\234 \341\365d\012",
  "\204\231x \373mis\374 \357",
  "\212 imple\331\317\243f\240\346\352 \371\370\233\316\212 f\214l-back\012",
  "\346\200speci\341ca\243\340f\221w\206\205\231\360\334\243\265ig\212\222d\012",
  "outpu\201\341\367\265writt\213\316bu\201\356\236 \320mpac\201\213\320d\372\355s\275\305\012",
  "\346\200\327\352 s\304dow\203\245glob\362\327\337",
  "\315 \265m\206k\232\376\231p\222c\226\305: \344",
  "pu\242ic \301lack\203f\221w\206\205\231\360\334\243\357",
  "\223k\212w\350p\334\312t\261\371subs\207tu\243(\204c\221\222c\201#\333\200p\226t\211n\235"
#endif
       };

#ifdef SCPACK_PUSH
# undef SCPACK
#endif
